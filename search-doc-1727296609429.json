{"searchDocs":[{"title":"Multistream with OBS and FFMPEG","type":0,"sectionRef":"#","url":"/blog/multistream-ffmpeg","content":"This is a text companion to a YouTube video about streaming to multiple channels at once using OBS and FFMPEG. info I have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or view the video on YouTube. Download MultiStream GUI If you would like to use a batch script that you can audit, you can use the following script. multistream.bat @echo off :: Find more information at http://jaymartmedia.com/multistream/ :: Change this to the path to the folder in which OBS saves the recording (should end in &quot;\\&quot;) make sure that there is no space beside the &quot;=&quot; sign :: Format looks like: C:\\Users\\waver\\Videos\\ set folder_path=C:\\Users\\waver\\Videos\\ :: Change this to the RTMP url that you would like to stream to (should end in &quot;/&quot;) make sure there is no space beside the &quot;=&quot; sign :: Common ingest servers :: YouTube: rtmp://a.rtmp.youtube.com/live2/ :: Twitch - Atlanta: rtmp://live-atl.twitch.tv/app/ :: Twitch - Dallas: rtmp://live-dfw.twitch.tv/app/ :: Twitch - San Fran: rtmp://live-sfo.twitch.tv/app/ set rtmp_url=rtmp://a.rtmp.youtube.com/live2/ :: Change this to your streaming key. Make sure there is no space beside the &quot;=&quot; sign set stream_key=xxxx-xxxx-xxxx-xxxx :: Loops through all the files in the folder in which OBS saves recordings :: Saves the most recently created file in the file_name variable for /f %%i in ('dir /b /s %folder_path%*.flv') do set file_name=%%i :: Outputs the name of the most recently created file (helps with debugging) echo The most recently created file is %file_name% :: Outputs the command that the script calls (helps with debugging) echo ffmpeg -re -i %file_name% -acodec copy -vcodec copy -f flv %rtmp_url%%stream_key% :: Calls the ffmpeg command ffmpeg -re -i %file_name% -acodec copy -vcodec copy -f flv %rtmp_url%%stream_key% :: Pauses so you can see the output pause ","keywords":"","version":null},{"title":"Welcome to the blog","type":0,"sectionRef":"#","url":"/blog/welcome-to-the-blog","content":"Welcome to the blog! I probably won't post here more than a few times a year. I will primarily use this as a place to put text companions to YouTube videos.","keywords":"","version":null},{"title":"Web Scraping with PHP","type":0,"sectionRef":"#","url":"/blog/web-scraping-with-php","content":"","keywords":"","version":null},{"title":"Installing the Library​","type":1,"pageTitle":"Web Scraping with PHP","url":"/blog/web-scraping-with-php#installing-the-library","content":" The first thing you need to do is download the scraping library from SourceForge. You can do this by going to http://simplehtmldom.sourceforge.net/ and clicking on &quot;Download latest version from SourceForge&quot;.    Once you have downloaded the library from SourceForge, unzip the compressed folder. Then move the &quot;simple_html_dom.php&quot; file to the folder that you will be building the web scraper in.    ","version":null,"tagName":"h2"},{"title":"Writing the Scraping Code​","type":1,"pageTitle":"Web Scraping with PHP","url":"/blog/web-scraping-with-php#writing-the-scraping-code","content":" Now that we have our library installed we can begin writing our scraping code.  &lt;?php # This imports and gives us access to the scraping library include('simple_html_dom.php'); ?&gt;   Now that we have access to the scraping library, we can use the file_get_html function to create a DOM object from a url.  &lt;?php # This imports and gives us access to the scraping library include('simple_html_dom.php'); # Create HTML DOM object from url $html = file_get_html('https://google.com'); ?&gt;   We can then pull specific elements from this DOM object by calling the find method and passing in the tag name of the element we would like to grab. We can also pass an index if we would like to grab only a single instance of a particular tag. If we want to grab an array of tags, we refrain from passing an index.  # Create HTML DOM object from url $html = file_get_html('https://google.com'); # Gets the 0th title element from the DOM object and echos it to the webpage echo $html-&gt;find('title',0); # If we don't pass an index we can get an array of all the anchor elements from the DOM object $array_of_anchors = $html-&gt;find('a'); # We can echo all of the anchor elements from the array above by using a simple for loop for( $i = 0; $i &lt; sizeof($list_of_anchors); $i++ ){ # echo each anchor by using the $i iterator to pull the anchor in each index position echo $list_of_anchors[$i]; }   In addition to selecting elements based on their tag name, we can select elements based on class or ID.  $html = file_get_html('https://google.com'); $array_of_hidden_divs = $html-&gt;find('div[class=&quot;hidden&quot;]'); $array_of_thumbnails = $html-&gt;find('img[id=&quot;thumbnail&quot;]');   The find method returns a DOM object. This means that we can call the find method on itself to grab child elements.  $html = file_get_html('https://google.com'); $ul = $html-&gt;find('ul',0); $array_of_li = $ul-&gt;find('li'); # This is the same as above, but in a single line $array_of_li = $html-&gt;find('ul',0)-&gt;find('li');   We can extract certain data such as the text of an element, or the hyperlink reference of an anchor tag, or the source of an image.  $html = file_get_html('https://google.com'); $button_text = $html-&gt;find('button',0)-&gt;plaintext; $anchor_href = $html-&gt;find('a',0)-&gt;href; $image_source = $html-&gt;find('img',0)-&gt;src;  ","version":null,"tagName":"h2"},{"title":"Input validation with Java","type":0,"sectionRef":"#","url":"/blog/input-validation-with-java","content":"In this article I will be showing you how to perform validation on user input in Java. This article assumes that you have a basic understanding of Java and the Scanner class, and that you already have a compiler or IDE installed. I will be using JGrasp but you can use your favorite enviroment. info I have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or view the video on YouTube. The purpose of user validation is to make sure that the user inputs a value that is both the correct type and a valid value. For example: the user should not be allowed to center a negative number for their age. The user should also not be allowed to enter a String such as &quot;Hello&quot; for their age. The age must be a positive integer, or float, depending on the use case. Code to read an int // must have imported the scanner class // import java.util.*; public static int read_int(Scanner stdin, String prompt){ int i = -1; while( i &lt; 0 ){ System.out.print(prompt); String input = stdin.nextLine(); try{ i = Integer.valueOf(input); } catch (NumberFormatException e) { i = -1; } } return i; }// end read_int function Code to read a float // must have imported the scanner class // import java.util.*; public static float read_float(Scanner stdin, String prompt){ float i = -1; while( i &lt; 0 ){ System.out.print(prompt); String input = stdin.nextLine(); try{ i = Float.valueOf(input); } catch (NumberFormatException e) { i = -1; } } return i; }// end read_float function On line 3 the function accepts a scanner object in addition to a string. On line 4 we set a variable i which will hold our data value returned by the user. We initailize it at an invalid value so that our while loop will run. On line 5 we continue looping until i is greater than 0. This could easily be changed if we wanted the integer to be in a different range. On line 6 we ask our user for input by printing the prompt. On line 8 we accept input as a string using the scanner. Note that this MUST be .nextLine() we cannot use .nextInt() or .nextFloat() or we will get an error. On line 11 we attempt to convert the input string into an integer inside a try/catch block. On line 13 we set the variable i to an invalid value so the while loop will continue to run. Line 13 will only be executed if the input String cannot be converted to an integer. Using the read methods // sets up a new scanner object Scanner stdin = new Scanner(System.in); // calls the read_int function and passes in the scanner object and a text prompt int age = read_int(stdin, &quot;Enter your age: &quot;); // outputs the users age to the console System.out.println(&quot;Your age is: &quot;+age); Full code example import java.util.*; public class Demo { public static void main(String[] args) { Scanner stdin = new Scanner(System.in); float f = read_float(stdin, &quot;Enter a float&quot;); System.out.println(f); } public static float read_float(Scanner stdin, String prompt) { float i = -1; while (i &lt; 0) { System.out.print(prompt); String input = stdin.nextLine(); try { i = Float.valueOf(input); } catch (NumberFormatException e) { i = -1; } } return i; } } ","keywords":"","version":null},{"title":"Helpful Commands","type":0,"sectionRef":"#","url":"/articles/helpful-commands/","content":"","keywords":"","version":"Next"},{"title":"CLI Tools​","type":1,"pageTitle":"Helpful Commands","url":"/articles/helpful-commands/#cli-tools","content":" FFMPEG - video/audio conversionGit - source controlGPG - file encryptionNGINX - web serverNMAP - tool for mapping/debugging networksSSH - securely connect to remote machineTMUX - terminal session/window/pane manager  ","version":"Next","tagName":"h2"},{"title":"Containerization​","type":1,"pageTitle":"Helpful Commands","url":"/articles/helpful-commands/#containerization","content":" Docker/Docker Compose - containerize applicationsKubernetes - manage containers  ","version":"Next","tagName":"h2"},{"title":"IDE/Text Editor​","type":1,"pageTitle":"Helpful Commands","url":"/articles/helpful-commands/#idetext-editor","content":" VIM - lightweight text editor often installed by defaultVisual Studio - good IDE for C# projectsVSCode - good general purpose IDE  ","version":"Next","tagName":"h2"},{"title":"Language Specific​","type":1,"pageTitle":"Helpful Commands","url":"/articles/helpful-commands/#language-specific","content":" .NET - C# frameworkAngular - frontend TS frameworkNode and NPM - server-side JS/TS engine and package managerNPM Packages - specific NPM packages that are useful in CLIPostgreSQL - open source, relational database  ","version":"Next","tagName":"h2"},{"title":"OS​","type":1,"pageTitle":"Helpful Commands","url":"/articles/helpful-commands/#os","content":" Linux/Unix - popular server OS and for IT peoplesWindows - popular desktop OS ","version":"Next","tagName":"h2"},{"title":"Git","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/git","content":"Git Git is a command line tool for tracking changes in text files. Often used by software development teams to collaborate on shared code. git checkout -b {branchName} Create a new branch off of the current branch and immediately check it out git push -u origin {branchname} Push new branch to remote git config --global http.sslVerify false - disable ssl verification (DON'T DO THIS UNLESS YOU HAVE A VERY GOOD REASON!) git config --global http.sslVerify true - enable ssl verification (always do ASAP after disabling) git update-index --skip-worktree packages/backend/local-config.json - ignore changes to a tracked file in git. This could be useful if you have to change a file locally, but don't want to commit those changes. It can be dangerous to forget that it is ignored though. Use carefully. git update-index --no-skip-worktreen packages/backend/local-config.json - stop ignoring changes to a tracked file in git. Undoes the command above. git log --shortstat --author &quot;JayMartMedia&quot; --since &quot;2 weeks ago&quot; --until &quot;1 week ago&quot; | grep &quot;files changed&quot; | awk '{files+=$1; inserted+=$4; deleted+=$6} END {print &quot;files changed:&quot;, files, &quot;lines inserted:&quot;, inserted, &quot;lines deleted:&quot;, deleted}' - check lines and files changed by user in time period","keywords":"","version":"Next"},{"title":"GPG","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/gpg","content":"GPG GPG is a command line tool for encrypting files, typically available on linux and in git bash gpg -c {filename.ext} Encrypt a file with symmetric encryption (prompts for a password, and then produces a file called {filename.ext}.gpg) gpg {filename.ext.gpg Decrypt a file (if symmetrically encrypted, prompts for a password, then produces a file called {filename.ext}, attempts to overwrite if file already exists, if no, then allows user to enter a new filename) Resource: https://linux.die.net/man/1/gpg","keywords":"","version":"Next"},{"title":"FFMPEG","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/ffmpeg","content":"","keywords":"","version":"Next"},{"title":"Audio​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#audio","content":" ","version":"Next","tagName":"h2"},{"title":"Re-encode .mp3 audio file as .wav​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#re-encode-mp3-audio-file-as-wav","content":" ffmpeg -i someaudiofile.mp3 someaudiofile.wav  ","version":"Next","tagName":"h3"},{"title":"Video​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#video","content":" ","version":"Next","tagName":"h2"},{"title":"Re-encode to .mp4​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#re-encode-to-mp4","content":" ffmpeg -i input.MP4 output.mp4  ","version":"Next","tagName":"h3"},{"title":"Rotate video​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#rotate-video","content":" Rotate 90 clockwise:  ffmpeg -i in.mov -vf &quot;transpose=1&quot; out.movFor the transpose parameter you can pass:  0 = 90° counterclockwise and vertical flip (default) 1 = 90° clockwise 2 = 90° counterclockwise 3 = 90° clockwise and vertical flip   Use -vf &quot;transpose=2,transpose=2&quot; for 180 degrees.  src: https://stackoverflow.com/a/9570992  ","version":"Next","tagName":"h3"},{"title":"Gif​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#gif","content":" ","version":"Next","tagName":"h2"},{"title":"Convert video to gif​","type":1,"pageTitle":"FFMPEG","url":"/articles/helpful-commands/cli/ffmpeg#convert-video-to-gif","content":" Scale down 1080p video into 1/4: ffmpeg -i &quot;input-video.mkv&quot; -s 960x540 output.gif ","version":"Next","tagName":"h3"},{"title":"Setting up an NGINX reverse proxy","type":0,"sectionRef":"#","url":"/blog/nginx-reverse-proxy","content":"","keywords":"","version":null},{"title":"Overview​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#overview","content":" Pre-configuration: Configure a Linode Nanode VPS (optional)Install Docker (optional)Run some example sites (optional) Set up DNS to point domain names at the server public IP addressInstall NGINX on the serverWalk through setting up NGINX as a reverse proxy in a step-by-step mannerUse Certbot to install TLS certificates for NGINX (technically optional)  Each of these steps will follow a step by step manner with validation in between. I feel that small steps make it easier to understand what each change does, and makes it easier to debug if needed.  This article begins by configuring a server with the prerequisites for the demonstration. These first steps (Linode, Docker, example sites in Docker) are all optional if you already have an existing server running some web sites. But you can always spin up a Nanode instance for a few hours to follow the tutorial, then delete it once you're done. At the time of writing, a single Nanode costs ~$0.18 per day.  After the initial configuration we will create some DNS A records to point the domain names at the public IP address of the server. If you don't own a domain, I also explain how to use the hosts file to work around this locally.  Then we will install NGINX on the server, in this article we are using Linux, but you should be able to do something similar with NGINX on Windows. Once NGINX is installed, we will look at the default configuration. Then we will configure NGINX as a reverse proxy.  Finally we will enable HTTPS on the reverse proxy using Certbot. Certbot does appear to be compatible with Windows although I have not used Certbot on Windows myself.  ","version":null,"tagName":"h2"},{"title":"What is a reverse proxy and why would I need one?​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#what-is-a-reverse-proxy-and-why-would-i-need-one","content":" Only a single process can listen on a specific port, in fact the purpose of a port is to specify which process a TCP/UDP packet/datagram should go to.  For that reason, if multiple sites are running on a server, they must each be running on a different port.  Setting up a reverse proxy will allow all requests to be sent to the reverse proxy on the default HTTP/HTTPS ports (80, 443) and then forwarded to the respective app based on the value of the host header. This way the end user does not need to remember the port number for each site, they only need to remember the domain name.  Architecture diagram​  On the right side of the diagram is the server on which the sites are running. The bottom section of the server shows each site and the port they are listening on (RED instance, GREEN instance, BLUE instance, etc.), the top section shows the NGINX reverse proxy listening on ports 80 and 443.  The red bounding box shows how requests are routed without the use of a reverse proxy. Without a reverse proxy the requests are routed to each site based on the port of the request. The down side of this approach is that users must know the port that each site is running on. Most users aren't even aware of the concept of a port, so this will be confusing and lead to a bad user experience.  The blue bounding box shows how requests are routed when using a reverse proxy. In this case the reverse proxy is listening on ports 80 and 443, the default HTTP and HTTPS ports. This means that users do not need to provide a port number, since when the port is excluded, the default port for the protocol is used. Since all requests use the same ports, the reverse proxy will use the host header to route the request to the specific site. The host header is included in each request by the HTTP client (browser or otherwise) that the user is using. When the reverse proxy receives the request, it looks at the host header, checks the mapping, and proxies the request to the proper site.    ","version":null,"tagName":"h3"},{"title":"Pre-configuration​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#pre-configuration","content":" The Linode, Docker and example app set up steps are completely optional.  We are using Linode in this article because it's cheap and easy to get a server up and running with a public IP address. If you have an existing VPS, or physical server/computer on your home network then you can use that.  We will use Docker as a simple way to run multiple site to demonstrate how the reverse proxy works. If you're watching this video, you likely already have multiple sites running that you would like to put the reverse proxy in front of. You are welcome to follow through the Docker steps as a way to get some hands-on experience as part of the tutorial, or you can just use your existing sites.  ","version":null,"tagName":"h2"},{"title":"Linode VPS (optional)​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#linode-vps-optional","content":" We'll be using a Linode Nanode (small VPS) running Debian 12 for this article. As mentioned above, nothing in this video is specific to Linode, so you can use any cloud provider of your choosing, or you could run this on your own server.    ","version":null,"tagName":"h3"},{"title":"Install Docker (optional)​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#install-docker-optional","content":" The following steps to set up Docker on Debian were taken from the Docker site. Feel free to refer to the first-party documentation.  To check if you have Docker installed already on your server, you can run docker --version. If this returns a Docker version, then you may be good to go, otherwise you can follow the steps below.  # Install docker: https://docs.docker.com/engine/install/debian/ # Setup apt repositories for docker sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\ $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null sudo apt-get update # Install docker sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin # Test docker sudo docker run hello-world   ","version":null,"tagName":"h3"},{"title":"Startup example sites in Docker (optional)​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#startup-example-sites-in-docker-optional","content":" If you have chosen to install Docker, you can use the following commands to run three instances of the micro-express Docker container which can be used to test the reverse proxy. These commands will set up the containers to listen on ports 5000, 5001, 5002 and each return a unique message to indicate which container received the request. You can change the INSTANCE_ID and MESSAGE environment variables to be something more memorable/meaningful to you if you want to.  docker run -d -p 5000:3000 --name 000 -e MESSAGE=&quot;Hello from instance RED&quot; -e INSTANCE_ID=&quot;RED&quot; jaymartmedia/micro-express:0.0.1 docker run -d -p 5001:3000 --name 001 -e MESSAGE=&quot;Hello from instance GREEN&quot; -e INSTANCE_ID=&quot;GREEN&quot; jaymartmedia/micro-express:0.0.1 docker run -d -p 5002:3000 --name 002 -e MESSAGE=&quot;Hello from instance BLUE&quot; -e INSTANCE_ID=&quot;BLUE&quot; jaymartmedia/micro-express:0.0.1 docker run -d -p 5003:3000 --name 003 -e MESSAGE=&quot;Hello from instance ROOT&quot; -e INSTANCE_ID=&quot;ROOT&quot; jaymartmedia/micro-express:0.0.1   Run the following CURL commands on the server to test the containers  curl localhost:5000 # Should return &quot;Hello from instance RED&quot; (or the message you specified if you change it) curl localhost:5001 # Should return &quot;Hello from instance GREEN&quot; (or the message you specified if you change it) curl localhost:5002 # Should return &quot;Hello from instance BLUE&quot; (or the message you specified if you change it) curl localhost:5003 # Should return &quot;Hello from instance ROOT&quot; (or the message you specified if you change it)   Run the following CURL commands from another machine (or enter each URL in your browser) to make sure that your app is publicly accessible. If you are using a computer on your home network as the server then you will have to set it up to be publicly accessible, likely by configuring NAT rules in your router. This is outside of the scope of this tutorial, but you can refer to this superuser answer and Google &quot;{router model} NAT setup&quot; to get you started in the correct direction. You don't need any special set up for the client.  # Replace 50.116.47.185 with the public IP address of the server. # You could also go to 50.116.47.185:5000 in your browser if you don't have CURL installed curl 50.116.47.185:5000 # Should return &quot;Hello from instance RED&quot; curl 50.116.47.185:5001 # Should return &quot;Hello from instance GREEN&quot; curl 50.116.47.185:5002 # Should return &quot;Hello from instance BLUE&quot; curl 50.116.47.185:5003 # Should return &quot;Hello from instance ROOT&quot;   ","version":null,"tagName":"h3"},{"title":"DNS​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#dns","content":" The Domain Name System is used to point human-readable domain names to specific IP addresses. DNS also does other things, but pointing domain names to IPv4 addresses with &quot;A records&quot; is all we will be doing in this article.  ","version":null,"tagName":"h2"},{"title":"Set up DNS​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#set-up-dns","content":" Workaround if you don't have a domain If you don't have a domain name, you can buy one now or just skip down to the hosts file section to use a work-around.  If you own a domain name, you will need to create &quot;A records&quot; which point to the public IP address of your server. If your domain is in use, then you can use subdomains as I have in some of the examples below. For TTL (time-to-live) any value works, but for testing frequent changes low values such as 300-600 seconds (5-10 minutes) is convenient. The screenshots below show examples of both a root domain (crewviewer.com) as well as subdomains (red.jaymartmedia.com, green.crewviewer.com, etc.).  Example of A record in CPanel:  Example of A record in Namecheap:  Once the A records are set up, they can take some time to propagate. You can use a tool such as https://dnschecker.org/ to check whether they have propagated.  Workaround if you don't have a domain Edit the hosts file if you don't have a domain​ If you don't have a domain name yet, you can test via manual host file changes on the client. These changes will only take effect for the system where the host file change is made. In short you will need to open &quot;/etc/hosts&quot; (Linux) or &quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot; (Windows) in admin mode and add a line such as &quot;50.116.47.185 green.crewviewer.com&quot;. You will need to replace the IP address in the example with the public IP address of your server. Read this article for more info about how to edit your host file: https://www.howtogeek.com/27350/beginner-geek-how-to-edit-your-hosts-file/  ","version":null,"tagName":"h3"},{"title":"Validate DNS​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#validate-dns","content":" Once the DNS A records have propagated (or you have edited your hosts file) you can visit the domains. Since the reverse proxy hasn't been set up yet, you will also have to specify the port:  http://red.jaymartmedia.com:5000 - &quot;Hello from instance RED&quot;http://green.crewviewer.com:5001 - &quot;Hello from instance GREEN&quot;http://blue.crewviewer.com:5002 - &quot;Hello from instance BLUE&quot;http://crewviewer.com:5003 - &quot;Hello from instance ROOT&quot;  Since the domains are all just pointing at the same IP address and only using port to differentiate the site, you could also do:  http://red.jaymartmedia.com:5003 - &quot;Hello from instance ROOT&quot;  You could also use any of the other domain name + port combinations. The site is determined strictly based on the port (as shown in the red section of architecture diagram).  This is likely not the desired configuration for two reasons:  The red.jaymartmedia.com domain should only point to the RED instance, NOT rootThe need to include the port is inconvenient and users would need to know what port they need to use  The NGINX reverse proxy will solve both of these issues.  ","version":null,"tagName":"h3"},{"title":"Host header​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#host-header","content":" For each request that is made, the HTTP client (CURL, or the browser) will add a host header which is equal to the domain name that the request is made to. Below is a screenshot of the host header that is set by the browser when we visit red.crewviewer.com.    In one of the following steps we will configure NGINX to proxy the request to a specific site based on the host header that is set by the client.  ","version":null,"tagName":"h3"},{"title":"NGINX​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#nginx","content":" NGINX is a web-server software product that contains a lot of functionality such as serving static pages, some server-side pages, load balancing, and acting as a reverse proxy (what we'll be using). NGINX has some paid products, in this article we will be using NGINX open-source.  ","version":null,"tagName":"h2"},{"title":"Install NGINX​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#install-nginx","content":" We can run the following commands to start and run NGINX on Debian.  # Install nginx: https://www.nginx.com/resources/wiki/start/topics/tutorials/install/ sudo apt update sudo apt install nginx # May not be required sudo systemctl start nginx   ","version":null,"tagName":"h3"},{"title":"Validate default NGINX configuration​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#validate-default-nginx-configuration","content":" Test NGINX on the server via localhost and we should see the default NGINX welcome page.  curl localhost:80   We can also reach NGINX remotely via the public IP address as well as the DNS records that we set up earlier. Since NGINX runs on port 80 by default, and port 80 is the default http port, we don't need to specify the port. This is how users visit most other sites on the web. Since all of the following urls default to port 80, they all return the same default NGINX welcome page.  curl http://50.116.47.185 curl http://red.jaymartmedia.com curl http://green.crewviewer.com curl http://blue.crewviewer.com curl http://crewviewer.com   ","version":null,"tagName":"h3"},{"title":"Understand the default NGINX configuration​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#understand-the-default-nginx-configuration","content":" NGINX comes with a default configuration. We can view the configuration which is stored in the &quot;/etc/nginx/sites-enabled/default&quot; file by running cat /etc/nginx/sites-enabled/default.  /etc/nginx/sites-enabled/default server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; index index.html index.htm index.nginx-debian.html; server_name _; location / { # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; } }   We can see that the default configuration root path loads an html file from &quot;/var/www/html/index.nginx-debian.html&quot;. We can view this default html file by running cat /var/www/html/index.nginx-debian.html.  /var/www/html/index.nginx-debian.html &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Welcome to nginx!&lt;/title&gt; &lt;style&gt; html { color-scheme: light dark; } body { width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Welcome to nginx!&lt;/h1&gt; &lt;p&gt;If you see this page, the nginx web server is successfully installed and working. Further configuration is required.&lt;/p&gt; &lt;p&gt;For online documentation and support please refer to &lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt; Commercial support is available at &lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;   Notice that this is the same file that is returned by NGINX when we run curl localhost.  We will now delete this file so that we can write our own configuration file to set up the reverse proxy: rm /etc/nginx/sites-enabled/default  ","version":null,"tagName":"h3"},{"title":"Configure NGINX as a reverse proxy​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#configure-nginx-as-a-reverse-proxy","content":" We will configure the reverse proxy to proxy requests based on the host header rather than the port.  We will write our own configuration file to set up the reverse proxy. You can use nano, or any other visual or command line text editor. We will put the file in the &quot;/etc/nginx/conf.d&quot; directory and use the &quot;.conf&quot; extension so that NGINX will load our configuration file automatically when it is started.  Initial reverse proxy set up​  We will add a server block to specify how NGINX should behave:  Line 4: Specify the port for this server block to listen on. This should be port 80 since that is the default HTTP port.Line 6: Specify the server/host name that the server block should handle (red.jaymartmedia.com). Since we only have a single server block, this block will be treated as the default so ALL requests to port 80 will be handled here.Line 10: Specify what the server block should do with any requests to the root path and below (essentially any path). In this case we are sending the requests to &quot;localhost:5000&quot; which is where the RED instance is running.  /etc/nginx/conf.d/default.conf ### red.jaymartmedia.com server { # Port that the reverse proxy will listen on listen 80; # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.) server_name red.jaymartmedia.com; location / { # Upstream server/site that the reverse proxy will connect to proxy_pass http://localhost:5000; } }   We can restart NGINX by running sudo systemctl restart nginx.  Before when we made requests to this server on port 80, NGINX responded with the default NGINX welcome page. Now that we removed the default NGINX configuration and configured NGINX to be a reverse proxy, the requests will be proxied to the RED instance and we will get a response from the RED instance.  curl http://50.116.47.185 # Hello from instance RED curl http://red.jaymartmedia.com # Hello from instance RED curl http://green.crewviewer.com # Hello from instance RED curl http://blue.crewviewer.com # Hello from instance RED curl http://crewviewer.com # Hello from instance RED   Notice that all of the above requests reach the RED instance since the red server block is the default server block. We can fix this by explicitly defining a default server block.  Adding a default server block​  We can define a default server block to handle any requests which do not match any server_names in any of the server blocks.  We can explicitly define a server block by using the keyword &quot;default_server&quot; (line 3). If we do not explicitly define the server block, NGINX will use the first server block by default.  This server block will also match requests on port 80. Only a single process can listen on a specific port, in fact the purpose of a port is to specify which process a TCP/UDP packet/datagram should go to. That is why we need the reverse proxy in the first place. In this case, since both server blocks are used by the same NGINX process, it is fine for multiple server blocks to match on port 80.  &quot;return 502&quot; (line 4) will cause NGINX to return a &quot;502 Bad Gateway&quot; response to any requests which don't match any of the server_names.  /etc/nginx/conf.d/default.conf ### Default server server { listen 80 default_server; return 502; } ### red.jaymartmedia.com server { # Port that the reverse proxy will listen on listen 80; # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.) server_name red.jaymartmedia.com; location / { # Upstream server/site that the reverse proxy will connect to proxy_pass http://localhost:5000; } }   We can restart NGINX by running sudo systemctl restart nginx.  Before when we made requests to this server on port 80, all requests were proxied to the RED instance and we got a response from the RED instance. Now any requests with the &quot;host: red.jaymartmedia.com&quot; header will be proxied to the RED instance, but all other requests will use the default server block which returns the &quot;502 Bad Gateway&quot; response.  curl http://50.116.47.185 # 502 Bad Gateway curl http://red.jaymartmedia.com # Hello from instance RED curl http://green.crewviewer.com # 502 Bad Gateway curl http://blue.crewviewer.com # 502 Bad Gateway curl http://crewviewer.com # 502 Bad Gateway   Adding server blocks for more sites​  We can duplicate the second server block and change the server_name and proxy_pass port values as needed for each site.  /etc/nginx/conf.d/default.conf ### Default server server { listen 80 default_server; return 502; } ### red.jaymartmedia.com server { # Port that the reverse proxy will listen on listen 80; # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.) server_name red.jaymartmedia.com; location / { # Upstream server/site that the reverse proxy will connect to proxy_pass http://localhost:5000; } } ### green.crewviewer.com server { # Port that the reverse proxy will listen on listen 80; # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.) server_name green.crewviewer.com; location / { # Upstream server/site that the reverse proxy will connect to proxy_pass http://localhost:5001; } } ### crewviewer.com server { # Port that the reverse proxy will listen on listen 80; # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.) server_name crewviewer.com; location / { # Upstream server/site that the reverse proxy will connect to proxy_pass http://localhost:5003; } }   We can restart NGINX by running sudo systemctl restart nginx.  Before when we made requests to this server, red.jaymartmedia.com went to RED instance, and all other requests went to the default server and returned 502 bad gateway errors. Now, after adding more server blocks, any requests with a host header which matches a server_names specified will go to the respective pod and any requests that don't match will go to the default server block.  curl http://50.116.47.185 # 502 Bad Gateway curl http://red.jaymartmedia.com # Hello from instance RED curl http://green.crewviewer.com # Hello from instance GREEN curl http://blue.crewviewer.com # 502 Bad Gateway curl http://crewviewer.com # Hello from instance ROOT   We can also explicitly set the host header using CURL so that our request matches a server name:  curl http://50.116.47.185 -H &quot;host: red.jaymartmedia.com&quot; # Hello from instance RED   I won't set up the server blocks for the other domains (because the default.conf file is getting big 😁), but by now it should be fairly clear how that would be done.  ","version":null,"tagName":"h3"},{"title":"HTTPS (technically optional)​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#https-technically-optional","content":" So far all of our requests have used HTTP on port 80. This is fine for some sites, but it means that data moves across the network unencrypted which can allow other people to see your traffic. This is terrible for any security sensitive sites, for obvious reasons.  We can configure NGINX to handle HTTPS requests using a tool called Certbot. HTTPS encrypts traffic which prevents other people from viewing all of your traffic. By default HTTPS uses port 443.  Workaround if you don't have a domain Unfortunately Certbot will only work if you have a domain, it will not work if you used the host file workaround. This is because the domain needs to be in the public DNS and accessible from the Let's Encrypt servers, but the host file change only applies to the computer that the change is made on.  ","version":null,"tagName":"h2"},{"title":"Install Certbot​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#install-certbot","content":" Certbot handles validation of your domain, installing the TLS certificate, and automatic renewal of the TLS certificate. Certbot uses a free TLS certificate authority called Let's Encrypt.  The following commands install a package manager called Snap, remove old versions of Certbot, then install and set up Certbot.  # Install snapd: https://snapcraft.io/docs/installing-snap-on-debian sudo apt update sudo apt install snapd # Uninstall old versions of certbot sudo apt-get remove certbot # Install certbot: https://certbot.eff.org/instructions?ws=nginx&amp;os=debianbuster sudo snap install --classic certbot # Link certbot as executable bin sudo ln -s /snap/bin/certbot /usr/bin/certbot   ","version":null,"tagName":"h3"},{"title":"Use Certbot to add TLS certificates for each domain​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#use-certbot-to-add-tls-certificates-for-each-domain","content":" The Certbot command line tool can be used to install TLS certs. The Certbot website has a helpful wizard style UI to give specific instructions based on your web server and operating system.  The CLI tool has multiple options, it can install the cert but allow us to manually update the NGINX config file, or it can install the cert and automatically update the NGINX config file. We'll walk through both methods in this article.  Manually update the NGINX config file​  Manually updating the NGINX config file to reference the TLS certificates may help to understand how it is set up. But once we understand what's going on, the convenience of the automatic command is very nice.  Run the following command on the server. Certbot will be prompt for a few options such as adding an email for upcoming expiration alerts, terms of service agreement, marketing email opt in/out, and selecting the domain that we want to get the certificate for.  # Install cert sudo certbot certonly --nginx # Enter email for warnings, Y to agree to ToS, Y/N for marketing emails, select the domain   Once the cert is installed, we will have to reference it from the NGINX configuration file. We can view the certificate and key by running the following commands:  ls /etc/letsencrypt/live/\\{domain/host name\\}/cat /etc/letsencrypt/live/\\{domain/host name\\}/fullchain.pemcat /etc/letsencrypt/live/\\{domain/host name\\}/privkey.pem  These changes will be made to the existing config file, it will not completely replace the existing file. Update the default.conf file by adding a new server block that matches HTTPS requests on port 443 (lines 14-24). And update the port 80 server block to redirect to the page using HTTPS (lines 10-11).  /etc/nginx/conf.d/default.conf ... ### red.jaymartmedia.com server { # Port that the reverse proxy will listen on listen 80; # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.) server_name red.jaymartmedia.com; # Redirect to https version and retains path return 301 https://$host$request_uri; } server { listen 443 ssl; server_name red.jaymartmedia.com; ssl_certificate /etc/letsencrypt/live/red.jaymartmedia.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/red.jaymartmedia.com/privkey.pem; location / { proxy_pass http://localhost:5000; } } ...   We can restart NGINX by running sudo systemctl restart nginx.  We can verify that HTTPS is set up for red.jaymartmedia.com, and if we try to go to https://green.crewviewer.com we will get a timeout since we haven't set up for that domain yet.  curl http://red.jaymartmedia.com # 301 redirect to https://red.jaymartmedia.com curl https://red.jaymartmedia.com # Hello from instance RED curl https://green.crewviewer.com # Will timeout since there are no server blocks that match green.crewviewer.com on port 443   If you go to http://red.jaymartmedia.com in your browser it should automatically redirect you to the page via HTTPS.  Allow Certbot to automatically update the NGINX config file​  Before running the automatic certbot command we will backup our existing configuration file so we can compare the configuration files to see the changes that certbot makes.  cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bkp  Run the following command on the server. If this is the first time that certbot is run, Certbot will prompt for a few options such as adding an email for upcoming expiration alerts, terms of service agreement, and marketing email opt in/out. Then Certbot will prompt for the domain that we want to get the certificate for.  # Install cert sudo certbot --nginx # Enter email for warnings, Y to agree to ToS, Y/N for marketing emails, select the domain   Run the following command to show the changes that NGINX made.  diff /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bkp  Here is what the changes will likely look like.  /etc/nginx/conf.d/default.conf changes TBD diff   We can verify that HTTPS is set up for green.crewviewer.com.  curl http://green.crewviewer.com # 301 redirect to https://green.crewviewer.com curl https://green.crewviewer.com # Hello from instance GREEN   If we go to http://green.crewviewer.com in the browser it should automatically redirect us to the page via HTTPS.  ","version":null,"tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"Setting up an NGINX reverse proxy","url":"/blog/nginx-reverse-proxy#summary","content":" In this article we:  Set up DNS records to point at the IP address of a serverInstalled NGINX on the serverLearned about the default NGINX configurationConfigured NGINX as a reverse proxy using host headers to differentiate sitesUsed Certbot to install Let's Encrypt TLS certificates for our domainsConfigured NGINX (manually and automatically) to use the TLS certificates to enable HTTPS on our sites ","version":null,"tagName":"h2"},{"title":"JQ","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/jq","content":"","keywords":"","version":"Next"},{"title":"Kubernetes​","type":1,"pageTitle":"JQ","url":"/articles/helpful-commands/cli/jq#kubernetes","content":" JQ is often used to parse the output from kubectl commands, for examples of that, refer to my notes on Kubenetes.  ","version":"Next","tagName":"h2"},{"title":"Examples​","type":1,"pageTitle":"JQ","url":"/articles/helpful-commands/cli/jq#examples","content":" Select and output a property  $ echo '{&quot;hello&quot;: &quot;world&quot;}' | jq .hello &quot;world&quot;   Select a value from an array  $ echo '{&quot;hello&quot;: [&quot;world&quot;, &quot;earth&quot;, &quot;space&quot;]}' | jq .hello[0] &quot;earth&quot;   Select all values from an array  $ echo '{&quot;hello&quot;: [&quot;world&quot;, &quot;earth&quot;, &quot;space&quot;]}' | jq .hello[] &quot;world&quot; &quot;earth&quot; &quot;space&quot;   Select nested values from an array and object  $ echo '{&quot;hello&quot;: [{&quot;place&quot;: &quot;earth&quot;, &quot;species&quot;: &quot;humans&quot;},{&quot;place&quot;: &quot;space&quot;, &quot;species&quot;: &quot;space-beings&quot;}]} | jq .hello[].species &quot;humans&quot; &quot;space-beings&quot;   Select multiple nested values from an array and object and combine into string  $ echo '{&quot;hello&quot;: [{&quot;place&quot;: &quot;earth&quot;, &quot;species&quot;: &quot;humans&quot;},{&quot;place&quot;: &quot;space&quot;, &quot;species&quot;: &quot;space-beings&quot;}]} | jq '.hello[] | &quot;hello, &quot; + .species + &quot; from &quot; + .place' -r hello, humans from earth hello, space-beings from space   Equivalent to (notice rather than using jq's built in pipe, we actually pipe via the normal bash pipe to a separate jq call)  $ echo '{&quot;hello&quot;: [{&quot;place&quot;: &quot;earth&quot;, &quot;species&quot;: &quot;humans&quot;},{&quot;place&quot;: &quot;space&quot;, &quot;species&quot;: &quot;space-beings&quot;}]} | jq .hello[] | jq '&quot;hello, &quot; + .species + &quot; from &quot; + .place' -r hello, humans from earth hello, space-beings from space   ","version":"Next","tagName":"h2"},{"title":"Helpful flags​","type":1,"pageTitle":"JQ","url":"/articles/helpful-commands/cli/jq#helpful-flags","content":" -r output as strings (i.e. not wrapped in &quot;&quot;)  ","version":"Next","tagName":"h2"},{"title":"Arrays (may be able to be used on strings too)​","type":1,"pageTitle":"JQ","url":"/articles/helpful-commands/cli/jq#arrays-may-be-able-to-be-used-on-strings-too","content":" Get specific index from array [0]  Get subarray [1:3] (lower bound inclusive, upper bound exclusive, i.e. [0,1,2,3] filtered by [1:2] returns [1,2])  Get first 3 items from array (index 0,1,2) [:3]  Get last 2 items from array [-2:]  Iterate over all items in array [] (may also work on objects) ","version":"Next","tagName":"h2"},{"title":"NGINX","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/nginx","content":"NGINX NGINX is a multi-purpose web server which can serve static files, act as a reverse-proxy/load-balancer, and more. Search for file with extension and fallback to nginx 404 when not found: location ~* \\.(jpg|jpeg|png|gif|ico|css|js|pdf|woff|woff2|pdf)$ { try_files $uri =404; } nginx -c $(pwd)/nginx.conf Run nginx conf in current directory","keywords":"","version":"Next"},{"title":"NMAP","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/nmap","content":"NMAP NMAP is a command line tool for mapping networks. Disclaimer: NMAP should only be used on networks which you are authorized to use it on. NMAP is a network tool used to nap networks and check for open ports. Check for open ports: nmap -sS -O -p80,443,8080 192.168.1.0","keywords":"","version":"Next"},{"title":"Docker","type":0,"sectionRef":"#","url":"/articles/helpful-commands/containerization/docker","content":"","keywords":"","version":"Next"},{"title":"Docker Specific​","type":1,"pageTitle":"Docker","url":"/articles/helpful-commands/containerization/docker#docker-specific","content":" docker rm -f $(docker ps -a -q) Remove all docker containers  docker rmi -f $(docker images -a -q Remove all docker images  docker rm $(docker stop $(docker ps --quiet --filter name=&lt;containerName&gt;)) Stop and remove docker container by name  docker ps List docker containers  docker exec -it {containername} bin/bash SSH into docker container  docker build --progress=plain -t app-name:1.0 . Remove special formatting which can collapse lines and hide some output  ","version":"Next","tagName":"h2"},{"title":"Docker Compose​","type":1,"pageTitle":"Docker","url":"/articles/helpful-commands/containerization/docker#docker-compose","content":" docker-compose up Start the docker-compose.yaml file in the same directory  docker-compose -f docker-compose-local.yaml up Startup the docker compose file specified  docker-compose up --force-recreate Start docker compose and use new containers rather than previously used containers that have been stopped  docker compose docs: https://docs.docker.com/engine/reference/commandline/compose  docker compose up docs: https://docs.docker.com/engine/reference/commandline/compose_up ","version":"Next","tagName":"h2"},{"title":"TMUX","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/tmux","content":"","keywords":"","version":"Next"},{"title":"Cheat sheet​","type":1,"pageTitle":"TMUX","url":"/articles/helpful-commands/cli/tmux#cheat-sheet","content":" https://devhints.io/tmux  ","version":"Next","tagName":"h2"},{"title":"Starting/Restarting TMUX​","type":1,"pageTitle":"TMUX","url":"/articles/helpful-commands/cli/tmux#startingrestarting-tmux","content":" To start tmux: tmux  To start tmux with a named session: tmux new -s mysession  To attach to an existing session: tmux ls then tmux attach -t {session id (number, or name if provided)}  Rename existing session: tmux rename-session -t {old session id (number or name if provided)} {new session name}  ","version":"Next","tagName":"h2"},{"title":"Pane/Tile Management​","type":1,"pageTitle":"TMUX","url":"/articles/helpful-commands/cli/tmux#panetile-management","content":" Split left and right: C-b %  Split vertically: C-b &quot;  Change selected pane: C-b &lt;arrow key&gt;  Close currently selected pane: C-d or type exit  Make pane full sized (same command to shrink again): C-b z  Resize pane in direction: C-b C-&lt;arrow ey&gt;  ","version":"Next","tagName":"h2"},{"title":"Exiting TMUX​","type":1,"pageTitle":"TMUX","url":"/articles/helpful-commands/cli/tmux#exiting-tmux","content":" You can exit tmux by exiting all the panes inside  You can exit tmux (and leave session running in background) by detaching.  Detach from current session: C-b d  Detach from sessions (prompt): C-b D  Resource: https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/ ","version":"Next","tagName":"h2"},{"title":"SSH","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/ssh","content":"","keywords":"","version":"Next"},{"title":"Resources​","type":1,"pageTitle":"SSH","url":"/articles/helpful-commands/cli/ssh#resources","content":" More info on generating keys: https://www.ssh.com/academy/ssh/keygen ","version":"Next","tagName":"h2"},{"title":"Web Development","type":0,"sectionRef":"#","url":"/articles/helpful-commands/cli/web-dev","content":"Web Development What is CSP: https://scotthelme.co.uk/content-security-policy-an-introduction/","keywords":"","version":"Next"},{"title":"VIM","type":0,"sectionRef":"#","url":"/articles/helpful-commands/ide/vim","content":"","keywords":"","version":"Next"},{"title":"Motions​","type":1,"pageTitle":"VIM","url":"/articles/helpful-commands/ide/vim#motions","content":" $ - Jump to end of line  0 (zero) - Jump to beginning of line  ( - Jump to previous paragraph (empty line)  ) - Jump to next paragraph (empty line)  ","version":"Next","tagName":"h2"},{"title":"Regex​","type":1,"pageTitle":"VIM","url":"/articles/helpful-commands/ide/vim#regex","content":" /test -&gt; ENTER - search file for instances of &quot;test&quot;  n - repeat search (find next instance of match)  N - repeat search backwards (find previous instance of match)  :s/old/new -&gt; ENTER - replace the first instance of &quot;old&quot; with &quot;new&quot; in the current line only  :s/old/new/g -&gt; ENTER - replace all instances of &quot;old&quot; with &quot;new&quot; in the current line only  :%s/old/new/g -&gt; ENTER - replace all instances of &quot;old&quot; with &quot;new&quot; in the current file  :%s/old/new/gc -&gt; ENTER - replace all instances of &quot;old&quot; with &quot;new&quot; in the current file but prompt for confirmation before each instance  ","version":"Next","tagName":"h2"},{"title":"Visual Copy/Paste​","type":1,"pageTitle":"VIM","url":"/articles/helpful-commands/ide/vim#visual-copypaste","content":" Highlight the character you would like to start copying atPress &quot;v&quot; to enter visual modeHighlight the character you would like to stop copying atPress &quot;y&quot; to yank and enter normal modeNavigate to where you want to pastePress &quot;p&quot; to paste the yanked text  ref: https://linuxize.com/post/how-to-copy-cut-paste-in-vim/  ","version":"Next","tagName":"h2"},{"title":"Tabs​","type":1,"pageTitle":"VIM","url":"/articles/helpful-commands/ide/vim#tabs","content":" CTRL+w SHIFT+t - move current pane to new tab  :clo - close current tab  Netrc  Create a new file: :%  Typical Startup  vim . - open vim  :term - open terminal in vim  CTRL+w SHIFT+t - move terminal to new tab  CTRL+\\ CTRL+n - in terminal, switch to vim mode  i - in terminal, switch to insert/live mode  gt - switch between tabs  1gt/2gt - switch to first or second tab  References  vim cheat sheet: https://vim.rtorr.com/ ","version":"Next","tagName":"h2"},{"title":"visual-studio","type":0,"sectionRef":"#","url":"/articles/helpful-commands/ide/visual-studio","content":"","keywords":"","version":"Next"},{"title":"Visual Studio 2022​","type":1,"pageTitle":"visual-studio","url":"/articles/helpful-commands/ide/visual-studio#visual-studio-2022","content":" More extensive list of keybinds/shortcuts: https://learn.microsoft.com/en-us/visualstudio/ide/default-keyboard-shortcuts-in-visual-studio?view=vs-2022  CTRL + , - Search for file dropdown  CTRL + ; - Search for file in solution explorer  CTRL + SHIFT + F - Pop open advanced search window.. or is this hte same as one of the above?  CTRL + K + CTRL C - Comment out selected code  CTRL + K + CTRL U - Uncomment selected commented out code  ALT + {Up Arrow | Down Arrow} - Swap line with cursor with line above or below  ALT + SHIFT + . (?) - Select next occurence of highlighted characters  CTRL + - (?) - Go back to previous location after jumping to definition with CTRL + LMB src ","version":"Next","tagName":"h2"},{"title":"Angular","type":0,"sectionRef":"#","url":"/articles/helpful-commands/language-specific/angular","content":"","keywords":"","version":"Next"},{"title":"Running​","type":1,"pageTitle":"Angular","url":"/articles/helpful-commands/language-specific/angular#running","content":" ng serve --host 0.0.0.0 serve the app on the local network (by default is only accessible on local machine via localhost  ","version":"Next","tagName":"h2"},{"title":"Generation​","type":1,"pageTitle":"Angular","url":"/articles/helpful-commands/language-specific/angular#generation","content":" ","version":"Next","tagName":"h2"},{"title":"Component​","type":1,"pageTitle":"Angular","url":"/articles/helpful-commands/language-specific/angular#component","content":" https://angular.io/cli/generate#component  ng g c {componentName} shorthand for ng generate component {componentName}: Generates component, html, style, spec files and adds to componnent list in module  ng g c {componentName} -s -t: Same as above, but with inline template and styles  Dry run (-d) allows you to preview the changes. Generate a component in a particular module with inline styles and template.  $ng g c nav-module/profile-dropdown -s -t -d CREATE src/app/nav-module/profile-dropdown/profile-dropdown.component.spec.ts (690 bytes) CREATE src/app/nav-module/profile-dropdown/profile-dropdown.component.ts (294 bytes) UPDATE src/app/nav-module/nav.module.ts (560 bytes) NOTE: The &quot;dryRun&quot; flag means no changes were made.  ","version":"Next","tagName":"h3"},{"title":"Tests​","type":1,"pageTitle":"Angular","url":"/articles/helpful-commands/language-specific/angular#tests","content":" npm run test -- --include='**/app.component.spec.ts' - run tests for only specific files ","version":"Next","tagName":"h2"},{"title":"Dotnet","type":0,"sectionRef":"#","url":"/articles/helpful-commands/language-specific/dotnet","content":"","keywords":"","version":"Next"},{"title":"Start/Build App​","type":1,"pageTitle":"Dotnet","url":"/articles/helpful-commands/language-specific/dotnet#startbuild-app","content":" dotnet run --environment &quot;Production&quot; - Start application with production configuration (will use appSettings.Production.json) ","version":"Next","tagName":"h2"},{"title":"Node and NPM","type":0,"sectionRef":"#","url":"/articles/helpful-commands/language-specific/node-and-npm","content":"","keywords":"","version":"Next"},{"title":"Node​","type":1,"pageTitle":"Node and NPM","url":"/articles/helpful-commands/language-specific/node-and-npm#node","content":" ","version":"Next","tagName":"h2"},{"title":"NPM​","type":1,"pageTitle":"Node and NPM","url":"/articles/helpful-commands/language-specific/node-and-npm#npm","content":" npm install {packageName} --registry={registryUrl} install from specific npm registry  npm install {packageName} --registry=https://registry.npmjs.org install from npm public registry  ","version":"Next","tagName":"h2"},{"title":"NPX​","type":1,"pageTitle":"Node and NPM","url":"/articles/helpful-commands/language-specific/node-and-npm#npx","content":" npx can be used to run npm packages directly without globally installing them  npm_config_registry=https://registry.npmjs.org npx create-block-app@latest my-block2 --template react run a command with npx using the public registry  ","version":"Next","tagName":"h2"},{"title":"NVM​","type":1,"pageTitle":"Node and NPM","url":"/articles/helpful-commands/language-specific/node-and-npm#nvm","content":" NVM (Node Version Manager) is a tool for easily installing and changing versions of node  Windows: https://github.com/coreybutler/nvm-windows  Linux/Mac(?): https://github.com/nvm-sh/nvm  ","version":"Next","tagName":"h2"},{"title":"Disable HTTPS (Dangerous)​","type":1,"pageTitle":"Node and NPM","url":"/articles/helpful-commands/language-specific/node-and-npm#disable-https-dangerous","content":" These commands can make you vulnerable to man-in-the-middle attacks  npm set strict-ssl false  NODE_TLS_REJECT_UNAUTHORIZED=0 npm install {package} ","version":"Next","tagName":"h2"},{"title":"VSCode","type":0,"sectionRef":"#","url":"/articles/helpful-commands/ide/vscode","content":"","keywords":"","version":"Next"},{"title":"Setup​","type":1,"pageTitle":"VSCode","url":"/articles/helpful-commands/ide/vscode#setup","content":" ","version":"Next","tagName":"h2"},{"title":"Set git bash as your default terminal​","type":1,"pageTitle":"VSCode","url":"/articles/helpful-commands/ide/vscode#set-git-bash-as-your-default-terminal","content":" Install vscodegit bash: https://git-scm.com/downloads (if already open) Restart vscode You should now see vscode in the list of terminal options Press CTRL+SHIFT+P to open the command pallateSearch for &quot;Terminal: Select default profile&quot; that should narrow down to one optionPress enter or click on that option use the arrow keys to highlight your preferred terminal, them press enter (or just click your preferred option) ","version":"Next","tagName":"h3"},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"/articles/helpful-commands/containerization/kubernetes","content":"","keywords":"","version":"Next"},{"title":"Namespaces​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#namespaces","content":" ","version":"Next","tagName":"h2"},{"title":"Set default namespace​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#set-default-namespace","content":" kubectl config set-context --current --namespace=&lt;namespace&gt;  ","version":"Next","tagName":"h3"},{"title":"Exec into pod​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#exec-into-pod","content":" Open bash shell kubectl exec -it myapp-123 -- /bin/bash (//bin//bash on Windows)  Run command and exit kubectl exec myapp-123 -- ls  ","version":"Next","tagName":"h2"},{"title":"Cronjobs/Jobs​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#cronjobsjobs","content":" ","version":"Next","tagName":"h2"},{"title":"Create and run a job based on a cronjob​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#create-and-run-a-job-based-on-a-cronjob","content":" this can be used to manually trigger a cronjob  kubectl create job --from=cronjob/&lt;cronjob name&gt; &lt;job name&gt;  ","version":"Next","tagName":"h3"},{"title":"KIND​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#kind","content":" KIND stands for Kubernetes IN Docker. Kind is a tool that creates a development Kubernetes cluster inside of Docker quickly and easily. KIND also allows local multi-node setups.  choco install kind - Use Chocolatey to install kind on Windows  kind create cluster --name my-kind-cluster - Create a cluster  kubectl config get-contexts - List clusters  kubectl config use-context {name of context} - Switch to the KIND cluster  kind delete cluster --name my-kind-cluster - Delete the KIND cluster  ","version":"Next","tagName":"h2"},{"title":"Configuring a KIND cluster​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#configuring-a-kind-cluster","content":" KIND also allows you to customize your cluster when it is created via a yaml config file. (related blog post)  ./my-cluster-config.yaml kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane - role: worker - role: worker - role: worker   kind create cluster --name my-custom-kind-cluster --config ./my-cluster-config.yaml - Create a KIND cluster based on the config file  ","version":"Next","tagName":"h2"},{"title":"JQ​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#jq","content":" JQ is a CLI tool that can be used to filter/format json. It can be used to select specific values from json output from the kubectl get &lt;resource&gt; command.  See my notes on jq for more info  ","version":"Next","tagName":"h2"},{"title":"Get all images for a pod​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#get-all-images-for-a-pod","content":" $ kubectl get pod/mypod -o json | jq '.spec.containers[].image' -r nginx image2 image3   ","version":"Next","tagName":"h3"},{"title":"Get all resource types, names, and images​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-commands/containerization/kubernetes#get-all-resource-types-names-and-images","content":" $ kubectl get all -o json | jq '.items[] | (&quot;Resource kind: &quot; + .kind),(&quot;Resource name: &quot; + .metadata.name),(&quot;images: &quot; + spec.containers[]?.image),(&quot;&quot;)' -r Resource kind: Pod Resource name: mypod images: nginx Resource kind: Service Resource name: myservice  ","version":"Next","tagName":"h3"},{"title":"NPM Packages","type":0,"sectionRef":"#","url":"/articles/helpful-commands/language-specific/npm-packages","content":"","keywords":"","version":"Next"},{"title":"http-server​","type":1,"pageTitle":"NPM Packages","url":"/articles/helpful-commands/language-specific/npm-packages#http-server","content":" http-server can be used to run a local web server for serving static files  ","version":"Next","tagName":"h2"},{"title":"Serve a SPA where misses return the index. html​","type":1,"pageTitle":"NPM Packages","url":"/articles/helpful-commands/language-specific/npm-packages#serve-a-spa-where-misses-return-the-index-html","content":" npx http-server ./dist -p 8080 --proxy http://localhost:8080? ","version":"Next","tagName":"h3"},{"title":"Windows","type":0,"sectionRef":"#","url":"/articles/helpful-commands/os/windows","content":"","keywords":"","version":"Next"},{"title":"Keyboard Shortcuts​","type":1,"pageTitle":"Windows","url":"/articles/helpful-commands/os/windows#keyboard-shortcuts","content":" {WIN} + {CTRL} + {Left|Right Arrow} Switch desktops  {WIN} + {TAB} View all open windows in tiled overlay (and desktops along top of screen)  {WIN} + {SHIFT} + S Open screen/window/selection capture (may be Win 10 only) ","version":"Next","tagName":"h2"},{"title":"PostgreSQL","type":0,"sectionRef":"#","url":"/articles/helpful-commands/language-specific/postgresql","content":"PostgreSQL PostgreSQL is a free open source relational database. psql -U postgres Log into Postgres as user 'postgres' \\l List all databases in Postgres \\c {databasename} Connect to database \\d List all tables in Postgres database \\q Disconnect from database","keywords":"","version":"Next"},{"title":"Angular","type":0,"sectionRef":"#","url":"/articles/helpful-resources/angular","content":"Angular Angular Data-binding: https://angular.io/guide/binding-syntax","keywords":"","version":"Next"},{"title":"DevOps","type":0,"sectionRef":"#","url":"/articles/helpful-resources/devops","content":"","keywords":"","version":"Next"},{"title":"Terraform​","type":1,"pageTitle":"DevOps","url":"/articles/helpful-resources/devops#terraform","content":" Overview of Terraform from IBM (non code): https://www.youtube.com/watch?v=HmxkYNv1ksg  Terraform with GCP - Practical overview with no code. Shows how to use the cloud shell to apply a Terraform manifest which creates an s3 bucket, serverless function, docker service: https://www.youtube.com/watch?v=IBm0SmwEWpA ","version":"Next","tagName":"h2"},{"title":"Helpful Resources","type":0,"sectionRef":"#","url":"/articles/helpful-resources/","content":"","keywords":"","version":"Next"},{"title":"Encryption​","type":1,"pageTitle":"Helpful Resources","url":"/articles/helpful-resources/#encryption","content":" A list of encryption topics such as RSA, Diffie-Hellman, AES, TLS and more. Lots of videos from Computerphile!  ","version":"Next","tagName":"h2"},{"title":"Kafka​","type":1,"pageTitle":"Helpful Resources","url":"/articles/helpful-resources/#kafka","content":" An overview of the Apache Kafka message queue  ","version":"Next","tagName":"h2"},{"title":"Networking​","type":1,"pageTitle":"Helpful Resources","url":"/articles/helpful-resources/#networking","content":" An overview of networking topics including the OSI model  ","version":"Next","tagName":"h2"},{"title":"Site Reliability Engineering Career​","type":1,"pageTitle":"Helpful Resources","url":"/articles/helpful-resources/#site-reliability-engineering-career","content":" A write up of my impression of the SRE role. Note that this is my outside impression since I am a software developer, not actually an SRE.  ","version":"Next","tagName":"h2"},{"title":"Software Development Recommended Practices​","type":1,"pageTitle":"Helpful Resources","url":"/articles/helpful-resources/#software-development-recommended-practices","content":" A list of practices that may help to improve your team and make your life easier  ","version":"Next","tagName":"h2"},{"title":"Quality YouTube Channels​","type":1,"pageTitle":"Helpful Resources","url":"/articles/helpful-resources/#quality-youtube-channels","content":" A list of quality YouTube channels around the computer science industry and general CS topics ","version":"Next","tagName":"h2"},{"title":"CSS","type":0,"sectionRef":"#","url":"/articles/helpful-resources/css","content":"","keywords":"","version":"Next"},{"title":"Flexbox​","type":1,"pageTitle":"CSS","url":"/articles/helpful-resources/css#flexbox","content":" Everything you need to know about flexbox ","version":"Next","tagName":"h2"},{"title":"Linux/Unix","type":0,"sectionRef":"#","url":"/articles/helpful-commands/os/linux-unix","content":"","keywords":"","version":"Next"},{"title":"Compressing files (tar)​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#compressing-files-tar","content":" Resource: https://angular.io/cli/generate#component  tar -cvf documents.tar /home/jmm/documents/ Create a tar file  -cvf = compress, verbose (list files), filename (to be compressed into)documents.tar = the output file containing files/home/jmm/documents/ = input directory or file  tar -xvf documents.tar -C /home/jmm/new-documents/ Extract from a tar file  -xvf = eXtract, verbose (list files), filename (to extract from)documents.tar = .tar file to extract from-C = directory to extract into  ","version":"Next","tagName":"h2"},{"title":"SSH​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#ssh","content":" Resource: https://linux.die.net/man/1/ssh  ssh jmm@192.168.1.123 SSH into server at 192.168.1.123 as user &quot;jmm&quot; (will be asked for password if ssh keys not setup)  ssh jmm@192.168.1.123 ls Run the ls command on the server at 192.168.1.123 and show results of command in local machine terminal  ","version":"Next","tagName":"h2"},{"title":"SCP​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#scp","content":" Resource: https://linux.die.net/man/1/scp  scp pi@192.168.1.123:/home/jmm/.bashrc /home/jmm/ use SCP to copy .bashrc file from server at 192.168.1.123 to local machine /home/jmm/ directory  scp /home/jmm/.bashrc pi@192.168.1.123:/home/jmm/ use SCP to copy .bashrc file from local machine to server at 192.168.1.123  ","version":"Next","tagName":"h2"},{"title":"GREP​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#grep","content":" Resources:  General: https://www.geeksforgeeks.org/grep-command-in-unixlinux/Exclude with grep: https://linuxize.com/post/grep-exclude/  grep Docker ./readme.md search for all lines that contain &quot;Docker&quot; in the readme.md file  grep -r --exclude-dir=node_modules Docker search for all lines that contain &quot;Docker&quot; recursively excluding the node_modules directory  grep -r --exclude=*.{png,jpg} Docker search for &quot;Docker&quot; recursively and exclude files of type .png and .jpg  grep -Irn Docker recursively search for &quot;Docker&quot; while excluding binary files and return the line number  -I -- process a binary file as if it did not contain matching data; -n -- prefix each line of output with the 1-based line number within its input file -i -- case insensitive search  ","version":"Next","tagName":"h2"},{"title":"CURL​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#curl","content":" curl https://www.website.com/file.pdf --output file.pdf Download the file at the web address specified and save to an output file  curl -k https://www.website.com/file.pdf --output file.pdf allow insecure/self-signed-cert  ","version":"Next","tagName":"h2"},{"title":"Network​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#network","content":" lsof -i -P -n | grep LISTEN Check open ports  ","version":"Next","tagName":"h2"},{"title":"Command History Tricks​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#command-history-tricks","content":" ","version":"Next","tagName":"h2"},{"title":"View recent commands​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#view-recent-commands","content":" history - view recent commands  history | grep -i &quot;cargo&quot; - view recent commands in history that include &quot;cargo&quot;, -i is case-insensitive  !dotnet:p - display the most recent command that started with &quot;dotnet&quot;  !12:p - display the command at index 12  ","version":"Next","tagName":"h3"},{"title":"Rerun recent commands​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#rerun-recent-commands","content":" CTRL + p - paste in the most recent command that you ran, need to hit enter to run  !! - immediately rerun last command  !dotnet - immediately rerun last command that started with &quot;dotnet&quot;  !12 - immediately rerun command at index 12  ","version":"Next","tagName":"h3"},{"title":"Misc​","type":1,"pageTitle":"Linux/Unix","url":"/articles/helpful-commands/os/linux-unix#misc","content":" diff &lt;(ls old) &lt;(ls new) diff the output of two commands (such as comparing the contents of two directories)  echo -n &quot;string to encode here&quot; | base64 -w 0 base64 encode a string. -n removes the newline character when echoing, -w 0 prevents auto wrapping lines (default is 76 chars, base64 --help for more info)  printf '%-32s' &quot;Here is text!&quot; &gt;&gt; /dev/ttyS3 print a string padded with spaces to 32char and send to serial device  Read in a secret value (such as a password) from the command line so that it doesn't appear in shell history:  #!/bin/sh echo -n &quot;Enter secret: &quot; # echo text with no newline read -s secret # read in secret without showing chars echo $secret # do something with secret value (defo don't echo it)  ","version":"Next","tagName":"h2"},{"title":"Kafka","type":0,"sectionRef":"#","url":"/articles/helpful-resources/kafka","content":"","keywords":"","version":"Next"},{"title":"Kafka Connect​","type":1,"pageTitle":"Kafka","url":"/articles/helpful-resources/kafka#kafka-connect","content":" Kafka Connect is an ecosystem of tools that can be used to connect databases, data sources, and more to a Kafka topic. Connectors can be used as producers and consumers.  &quot;Apache Kafka 101: Kafka Connect&quot; by Confluent: https://youtu.be/J6adhl3wEj4 ","version":"Next","tagName":"h2"},{"title":"Kubernetes","type":0,"sectionRef":"#","url":"/articles/helpful-resources/kubernetes","content":"","keywords":"","version":"Next"},{"title":"Kubernetes CPU request and limit​","type":1,"pageTitle":"Kubernetes","url":"/articles/helpful-resources/kubernetes#kubernetes-cpu-request-and-limit","content":" https://www.numeratorengineering.com/requests-are-all-you-need-cpu-limits-and-throttling-in-kubernetes/ ","version":"Next","tagName":"h2"},{"title":"Encryption","type":0,"sectionRef":"#","url":"/articles/helpful-resources/encryption","content":"","keywords":"","version":"Next"},{"title":"E2EE (End-to-end encryption)​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#e2ee-end-to-end-encryption","content":" Dr. Mike Pound explains how end-to-end encryption works, and vulnerabilities that could arise if e2e encryption could not be used: https://youtu.be/jkV1KEJGKRA (Computerphile)  ","version":"Next","tagName":"h2"},{"title":"RSA (Rivest–Shamir–Adleman)​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#rsa-rivestshamiradleman","content":" RSA is a standard asymmetric (public/private) key encryption algorithm. Often used for SSH keys, TLS handshakes, and more. RSA is slower than symmetric key algorithms such as AES, so RSA is typically used to exchange a primary key at the beginning of a session. Then the symmetric key is used to encrypt and decrypt the data payloads that are transmitted throughout the session.  ","version":"Next","tagName":"h2"},{"title":"Breaking RSA​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#breaking-rsa","content":" computerphile: https://www.youtube.com/watch?v=-ShwJqAalOk  ","version":"Next","tagName":"h3"},{"title":"Diffie-Hellman key exchange​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#diffie-hellman-key-exchange","content":" The Diffie-Hellman key exchange is a way for two parties to create a shared symmetric encryption key.  In this video Dr. Mike Pound combines colored water to demonstrate how Diffie-Hellman allows two parties to create a shared symmetric key without knowing the others secret key: https://www.youtube.com/watch?v=NmM9HA2MQGI (Computerphile)  In this video Dr. Mike Pound discusses the mathmathmatics behind Diffie-Hellman, specifically the concept of how (ga)b == ga*b == (gb)a : https://www.youtube.com/watch?v=Yjrfm_oRO0w (Computerphile)  In this video Dr. Mike Pound explains how DH is susceptible to a man-in-the-middle attack and how RSA works in conjunction with DH to protect against this: https://youtu.be/vsXMMT2CqqE (Computerphile)  ","version":"Next","tagName":"h2"},{"title":"AES (Advanced Encryption Standard)​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#aes-advanced-encryption-standard","content":" AES is a standard symmetric key encryption algorithm that uses 128 bit blocks, with a 128, 192, or 256 bit key. Often used for SSL/TLS, file encryption, and more. AES is faster than RSA, and therefore typically used to encrypt and decrypt data payloads once both parties have the key.  In this video Dr. Mike Pound discusses how and why AES was chosen as the standard symmetric key encryption algorithm: https://youtu.be/VYech-c5Dic (Computerphile)  In this video Dr. Mike Pound walks through the AES algorithm: https://youtu.be/O4xNJsjtN6E (Computerphile)  ","version":"Next","tagName":"h2"},{"title":"TLS (Transport Layer Security)​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#tls-transport-layer-security","content":" In this video Dr. Mike Point discusses where TLS came from and where it sits within the layers of the internet: https://www.youtube.com/watch?v=0TLDTodL7Lc (Computerphile)  ","version":"Next","tagName":"h2"},{"title":"TLS Handshake​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#tls-handshake","content":" In this video Dr. Mike Pound discusses the TLS handshake: https://www.youtube.com/watch?v=86cQJ0MMses (Computerphile)  ","version":"Next","tagName":"h3"},{"title":"SP network (Substitution/Permutation)​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#sp-network-substitutionpermutation","content":" In this video Dr. Mike Pound discusses the concept of a substitution and permutation network which is what AES is based on: https://youtu.be/DLjzI5dX8jc (Computerphile)  ","version":"Next","tagName":"h2"},{"title":"Elliptic Curve​","type":1,"pageTitle":"Encryption","url":"/articles/helpful-resources/encryption#elliptic-curve","content":" Elliptic Curve cryptography is an alternative to Diffie-Hellman. Elliptic curve is more difficult to reverse engineer and therefore can use shorter keys which speeds gives elliptic curve a speed advantage over Diffie-Hellman.  There may be some curves which are not as secure as others (allow backdoors), therefore there are still researchers who are skeptical about trusting elliptic curve cryptography.  In this video Dr. Mike Pound explains the concept of elliptic curve cryptography: https://youtu.be/NF1pwjL9-DE (Computerphile)  In this video Dr. Mike Pound discusses a time when NIST pushed for specific values for P and Q which along with other circumstances led researchers to believe that these values of P and Q allowed the NSA a backdoor into keys generated using these values: https://youtu.be/nybVFJVXbww (Computerphile) ","version":"Next","tagName":"h2"},{"title":"Quality YouTube Channels","type":0,"sectionRef":"#","url":"/articles/helpful-resources/youtube-channels","content":"","keywords":"","version":"Next"},{"title":"Computerphile​","type":1,"pageTitle":"Quality YouTube Channels","url":"/articles/helpful-resources/youtube-channels#computerphile","content":" General computer science videos including everything from security, to AI, to interviews with computer scientists.  ","version":"Next","tagName":"h2"},{"title":"Hussein Nasser​","type":1,"pageTitle":"Quality YouTube Channels","url":"/articles/helpful-resources/youtube-channels#hussein-nasser","content":" Lots of videos where Hussein investigates and explains the architecture behind popular websites and services. Occasional videos breaking down news articles (for example, when there is a security breach on a popular site). ","version":"Next","tagName":"h2"},{"title":"Software Development","type":0,"sectionRef":"#","url":"/articles/helpful-resources/software-development-recommended-practices","content":"","keywords":"","version":"Next"},{"title":"Running a successful meeting​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#running-a-successful-meeting","content":" Note: these points do not apply to some more personal off-topic chat meetings or casual hangouts  ","version":"Next","tagName":"h2"},{"title":"Have a goal for the meeting​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#have-a-goal-for-the-meeting","content":" Try to stay on topic for the meeting. Going off topic can lead to confusion and wasted time. Try to stick to one topic at a time. Avoid rabbit trails when they are not relevant.  ","version":"Next","tagName":"h3"},{"title":"Have an agenda​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#have-an-agenda","content":" Having an agenda helps participants prepare for the meeting, and helps keep the meeting on topic.  ","version":"Next","tagName":"h3"},{"title":"Write down specific action items​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#write-down-specific-action-items","content":" During the meeting keep track of action items. At the end of the meeting make sure to briefly mention specific action items and make sure each of them is assigned to a specific person. This avoids the 'bystander effect' where each person assumes that someone else will take ownership of the action item, which can result in NO ONE completing the action item.  Post the action items in chat. This helps refresh everyone's memory as to what needs to be done.  Typical action items:  Follow up with the security teamPost a link to the documentation you referencedCreate a story on the backlog  ","version":"Next","tagName":"h3"},{"title":"Don't over-schedule​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#dont-over-schedule","content":" When a meeting is scheduled for longer than is required, often it will go off topic and take up the entire scheduled time anyway (Parkinson's Law). Making the meeting as short as possible can have the opposite effect. If the meeting is short people are forced to stay on topic. If they stray off-topic, guide them back to the topic and remind of time constraints. This loses some effectiveness if meetings are regularly allowed to go overtime.  ","version":"Next","tagName":"h3"},{"title":"End the meeting when it is over​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#end-the-meeting-when-it-is-over","content":" End the meeting when time is up, or when the topic is discussed to completion and any action items have been assigned. If meetings are regularly allowed to go overtime, people will tend to start going off-topic since they are not constrained by time.  If meetings always extend to the end of the scheduled time, often the last portion (after the issue is resolved) is just wasted time as everyone is afraid to end the meeting. This is a waste of everyone's time.  ","version":"Next","tagName":"h3"},{"title":"Managing deployments​","type":1,"pageTitle":"Software Development","url":"/articles/helpful-resources/software-development-recommended-practices#managing-deployments","content":" Note: Some of this likely only applies if doing manual production deploys rather than a true CI/CD pipeline.  It is helpful to have a deployment release plan before doing a production deployment. This is helpful for visibility to higher-ups, and shows that you are doing your due diligence before a deployment. Having a deployment plan that is shared with your team allows other team members to catch issues before the deployment. Perhaps there is a database change you forgot about, or validation data that needs to be setup. It also gives QA a chance to prepare for the deployment, it may be helpful to have them write down an overview of any validation steps that they will perform. This allows dev team to point out any other areas that may need extra testing. The deployment plan can be sent to teams working on other applications that interact with the app that you are deploying, this gives them a change to identify issues before the deployment.  Sections that may be helpful to include:  Who will be participating in the deployment - can help ensure that someone is responsible for the deployment and avoids the bystander effectList of application(s) that will be deployed including: Currently deployed production version - helpful for rollbackVersion that will be deployed to productionList of newly added features/bug fixes that will be deployed - helpful for QA to determine what should be validatedAny other dependencies that will be needed for the deployment - database changes required by the new code, data in order for QA to validate, user online to test, etc.Rollback plan - for simple code changes this can be as simple as deploying the previously released version (you recorded that, right?), for more complex changes this could also involve database rollback Step-by-step walk-through First we will notify the database team that they can deploy our changeCheck that the new column is in the databaseDeploy the updated API Perform any API validation Deploy the updated UI Perform UI validation ","version":"Next","tagName":"h2"},{"title":"SRE","type":0,"sectionRef":"#","url":"/articles/helpful-resources/site-reliability-engineering","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#overview","content":" This file contains my thoughts on Site Reliability Engineering (SRE). Disclaimer that I am a software engineer, I am not necessarily a site reliability engineer. But I think there is enough overlap in some responsibilities that my thoughts and experience may be helpful to others.  ","version":"Next","tagName":"h2"},{"title":"What is SRE?​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#what-is-sre","content":" Site reliability engineering roles, responsibilities and practices will vary from company to company. But the general purpose remains the same:  Ensure that software services are stable.Ensure that monitoring is in place to detect issues as early as possible.Ensure that there is a process to follow in case issues arise.  These responsibilities may belong to a specific role, or be shared between multiple roles.  ","version":"Next","tagName":"h2"},{"title":"SRE in my experience​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#sre-in-my-experience","content":" This section details my specific experience regrading SRE at different companies.  ","version":"Next","tagName":"h2"},{"title":"Fortune 50 Home Improvement Retail​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#fortune-50-home-improvement-retail","content":" I worked at a Fortune 50 company that had a dedicated SRE role. I did not interact with people in this role often, but there were a few instances where there was an issue with the app that my team owned, and they would reach out to me as a developer for support.  My perception of the SRE role at this company was that they were responsible for running the logging platform, and having automated checks in place to detect issues. If there were any issues, SRE would investigate to determine if it was a networking/infrastructure issue in which case they may be able to take action or escalate to another team, or an application issue in which case they may need to escalate to the development team. I am not sure whether the development team or SRE team managed the cloud resources at this company.  Tech:  Deployment stack CI/CD - JenkinsContainerization - Docker and PodmanContainer Orchestration - SpinnakerCompute - Google Cloud Run (Maybe Cloud Run, definitely GCP) Logging stack - Elasticsearch, KibanaMonitoring stack - Unsure, possibly some alerting tools in Kibana?  ","version":"Next","tagName":"h3"},{"title":"Multi-Billion-Dollar Logistics Brokerage​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#multi-billion-dollar-logistics-brokerage","content":" I worked at a logistics brokerage company that did not have an SRE title, but the SRE responsibilities were split between different roles. The two roles that took most of the SRE responsibility were the Platform Engineering (PE) and Network Operations Center (NOC).  The PE team was responsible for maintaining the Windows VMs that legacy applications were deployed to. They also maintained the on-prem Kubernetes (K8s) clusters that newly built apps run on. They were also responsible for maintaining the legacy logging platform, SEQ, as well as the new logging platform, Elasticsearch.  The NOC was responsible for maintaining the monitoring tools that would detect outages. When an issue was detected by automated checks, the NOC would follow run books and escalate to the on-call person for the appropriate team. The NOC was also responsible for change management.  The Cloud team was responsible for overseeing cloud resource creation and management, however development teams had control over specific cloud resources.  The development team was responsible for creating and maintaining their build and deployment pipelines. The development team could consult with PE if needed for pipeline management. The development team would request Resource Group creation from the Cloud team (Azure's logical grouping of cloud resources). Then the development team could create their own resources as needed inside that resource group.  Tech:  Deployment stack CI/CD - Azure PipelinesMonitoring - DatadogCloud - AzureLegacy Compute - On-prem Windows VMs running IISLogging - SEQ New/Green-field Containerization - DockerContainer Orchestration - KubernetesLogging - Elasticsearch  ","version":"Next","tagName":"h3"},{"title":"Is SRE for you?​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#is-sre-for-you","content":" If you are interested in the operations aspect of software (deploying/monitoring/maintaining), then SRE may be for you. SRE may be less programming heavy than development, which may be a good fit for people interested in software, but not necessarily programming. Note that it is likely that some programming knowledge would be required, or at the very least helpful, for many SRE roles.  At this point, I don't think SRE is the role for me. Mostly because I enjoy the programming/development aspect of software. That said, I am very interested in SRE in terms of being able to run/deploy and support my own applications, and I just enjoy learning stuff in general.  ","version":"Next","tagName":"h2"},{"title":"Salary​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#salary","content":" As with all potential careers, salary is relevant. Here are a few links to various salary sites:  glassdoor - https://www.glassdoor.com/Salaries/site-reliability-engineer-salary-SRCH_KO0,25.htmhired.com - https://hired.com/salaries/site-reliability-engineer-srelevels.fyi - https://www.levels.fyi/t/software-engineer/focus/site-reliability-srepayscale.com - https://www.payscale.com/research/US/Job=Site_Reliability_Engineer_(SRE)/Salary  ","version":"Next","tagName":"h3"},{"title":"Remote Work​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#remote-work","content":" SRE roles, like other software roles, are often remote. Although in-person/hybrid jobs can also be found if that is something you prefer.  ","version":"Next","tagName":"h3"},{"title":"SRE Concepts/Tools/Skills​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#sre-conceptstoolsskills","content":" Here are some general concepts, tools, and skills that may be helpful for someone in an SRE position. Note that all of the items listed below are not necessarily hard requirements. Full proficiency is not necessarily required for each of the listed items, working knowledge will be enough in a lot of cases.  Logging/Monitoring How to proactively detect issues with an application/network/etc.i.e. Datadog, ELK stack, etc. Networking How do DNS/Firewall/etc. work Deployment Docker/Kubernetes for containerized app managementTerraform for managing cloud infrastructureBuild/Deploy pipelines such as GitHub Actions/Jenkins/Azure Pipelines/etc. Programming Bash/Linux CLIPython  ","version":"Next","tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"SRE","url":"/articles/helpful-resources/site-reliability-engineering#resources","content":" Information about SRE from some large companies  AWS - https://aws.amazon.com/what-is/sre/Google - https://sre.google/Redhat - https://www.redhat.com/en/topics/devops/what-is-sreWikipedia - https://en.wikipedia.org/wiki/Site_reliability_engineering ","version":"Next","tagName":"h2"},{"title":"Networking","type":0,"sectionRef":"#","url":"/articles/helpful-resources/networking","content":"","keywords":"","version":"Next"},{"title":"Network Layers​","type":1,"pageTitle":"Networking","url":"/articles/helpful-resources/networking#network-layers","content":" ","version":"Next","tagName":"h2"},{"title":"Network Layer (L3)​","type":1,"pageTitle":"Networking","url":"/articles/helpful-resources/networking#network-layer-l3","content":" IP (Internet Protocol) - Network Layer​  IP routes one packet from a source machine to a destination machine. IP wraps other higher level protocols such as TCP, UDP, etc, which handle routing packets to a specific application/port on the destination machine.  ","version":"Next","tagName":"h3"},{"title":"Transport Layer (L4)​","type":1,"pageTitle":"Networking","url":"/articles/helpful-resources/networking#transport-layer-l4","content":" TCP (Transmission Control Protocal) - Transport Layer​  TCP routes data to a specific port. TCP provides acknowledgements to verify that a packet was recieved by the destination as well as ensures ordering of packets.  UDP (User Datagram Protocol) - Transport Layer​  UDP is a lightweight protocol that routes a packet to a specific port. UDP does not handle any acknowledgement or ordering of packets.  ","version":"Next","tagName":"h3"},{"title":"TCP/IP​","type":1,"pageTitle":"Networking","url":"/articles/helpful-resources/networking#tcpip","content":" Introduction to TCP/IP and sockets P1: Introducing the protocols and API: https://youtu.be/C7CpfL1p6y0 (Rhymu's Videos - Jun 14, 2020) ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}