"use strict";(self.webpackChunkjaymartmedia=self.webpackChunkjaymartmedia||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"welcome-to-the-blog","metadata":{"permalink":"/blog/welcome-to-the-blog","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2023-12-31-welcome.md","source":"@site/blog/2023-12-31-welcome.md","title":"Welcome to the blog","description":"Welcome to the blog! I probably won\'t post here more than a few times a year. I will primarily use this as a place to put text companions to YouTube videos.","date":"2023-12-31T00:00:00.000Z","formattedDate":"December 31, 2023","tags":[],"readingTime":0.16,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"welcome-to-the-blog","title":"Welcome to the blog","authors":"jaymartin","tags":[]},"unlisted":false,"nextItem":{"title":"Multistream with OBS and FFMPEG","permalink":"/blog/multistream-ffmpeg"}},"content":"Welcome to the blog! I probably won\'t post here more than a few times a year. I will primarily use this as a place to put text companions to YouTube videos.\\n\\n\x3c!--truncate--\x3e"},{"id":"multistream-ffmpeg","metadata":{"permalink":"/blog/multistream-ffmpeg","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2019-05-22-multistream.mdx","source":"@site/blog/2019-05-22-multistream.mdx","title":"Multistream with OBS and FFMPEG","description":"This is a text companion to a YouTube video about streaming to multiple channels at once using OBS and FFMPEG.","date":"2019-05-22T00:00:00.000Z","formattedDate":"May 22, 2019","tags":[{"label":"FFMPEG","permalink":"/blog/tags/ffmpeg"},{"label":"OBS","permalink":"/blog/tags/obs"}],"readingTime":1.75,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"multistream-ffmpeg","title":"Multistream with OBS and FFMPEG","authors":"jaymartin","tags":["FFMPEG","OBS"]},"unlisted":false,"prevItem":{"title":"Welcome to the blog","permalink":"/blog/welcome-to-the-blog"},"nextItem":{"title":"Web Scraping with PHP","permalink":"/blog/web-scraping-with-php"}},"content":"This is a text companion to a YouTube video about streaming to multiple channels at once using OBS and FFMPEG.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/6HAnG_BG3F4\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n# Multistream with OBS and FFMPEG\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=6HAnG_BG3F4).\\n:::\\n\\n<a href=\\"http://jaymartmedia.com/multistream/multistreamgui.exe\\"><button class=\\"w3-button w3-green\\">Download MultiStream GUI</button></a>\\n\\nIf you would like to use a batch script that you can audit, you can use the following script.\\n\\n```batch title=\\"multistream.bat\\"\\n@echo off\\n \\n:: Find more information at http://jaymartmedia.com/multistream/\\n \\n:: Change this to the path to the folder in which OBS saves the recording (should end in \\"\\\\\\") make sure that there is no space beside the \\"=\\" sign\\n:: Format looks like:     C:\\\\Users\\\\waver\\\\Videos\\\\\\nset folder_path=C:\\\\Users\\\\waver\\\\Videos\\\\\\n \\n:: Change this to the RTMP url that you would like to stream to (should end in \\"/\\") make sure there is no space beside the \\"=\\" sign\\n:: Common ingest servers\\n:: YouTube:           rtmp://a.rtmp.youtube.com/live2/\\n:: Twitch - Atlanta:  rtmp://live-atl.twitch.tv/app/\\n:: Twitch - Dallas:   rtmp://live-dfw.twitch.tv/app/\\n:: Twitch - San Fran: rtmp://live-sfo.twitch.tv/app/\\nset rtmp_url=rtmp://a.rtmp.youtube.com/live2/\\n \\n:: Change this to your streaming key. Make sure there is no space beside the \\"=\\" sign\\nset stream_key=xxxx-xxxx-xxxx-xxxx\\n \\n:: Loops through all the files in the folder in which OBS saves recordings\\n:: Saves the most recently created file in the file_name variable\\nfor /f %%i in (\'dir /b /s %folder_path%*.flv\') do set file_name=%%i\\n \\n:: Outputs the name of the most recently created file (helps with debugging)\\necho The most recently created file is %file_name%\\n \\n:: Outputs the command that the script calls (helps with debugging)\\necho ffmpeg -re -i %file_name% -acodec copy -vcodec copy -f flv %rtmp_url%%stream_key%\\n \\n:: Calls the ffmpeg command\\nffmpeg -re -i %file_name% -acodec copy -vcodec copy -f flv %rtmp_url%%stream_key%\\n \\n:: Pauses so you can see the output\\npause\\n```"},{"id":"web-scraping-with-php","metadata":{"permalink":"/blog/web-scraping-with-php","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2019-03-20-php-web-scraping.mdx","source":"@site/blog/2019-03-20-php-web-scraping.mdx","title":"Web Scraping with PHP","description":"In this article I will be showing you how to use PHP to scrape a web page. This article assumes that you have a basic understanding of PHP and programming concepts, and that you have access to a server capable of running PHP. If you do not have access to a server capable of running PHP, you can install WAMP on Windows 10 by watching my installation video. In a way, scraping involves reverse engineering a web page so it helps to be familiar with HTML.","date":"2019-03-20T00:00:00.000Z","formattedDate":"March 20, 2019","tags":[{"label":"PHP","permalink":"/blog/tags/php"}],"readingTime":3.45,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"web-scraping-with-php","title":"Web Scraping with PHP","authors":"jaymartin","tags":["PHP"]},"unlisted":false,"prevItem":{"title":"Multistream with OBS and FFMPEG","permalink":"/blog/multistream-ffmpeg"},"nextItem":{"title":"Input validation with Java","permalink":"/blog/input-validation-with-java"}},"content":"In this article I will be showing you how to use PHP to scrape a web page. This article assumes that you have a basic understanding of PHP and programming concepts, and that you have access to a server capable of running PHP. If you do not have access to a server capable of running PHP, you can [install WAMP on Windows 10 by watching my installation video](/articles/legacy/wamp-server/). In a way, scraping involves reverse engineering a web page so it helps to be familiar with HTML.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/Uc5mfudMTKE\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n<br />\\n\\n# Web Scraping With PHP\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=Uc5mfudMTKE).\\n:::\\n\\nAlthough there are other ways to scrape a web page with PHP, this article will focus on the Simple HTML DOM Parser. I have chosen to use this library because this is the library that I have experiance with and it is easy to use with great documentation.\\n\\n:::danger[Disclaimer]\\n\\n- Do not wep scrape maliciously.\\n- Do not scrape to steal data.\\n\\nYOU are responsible for anything you do with the skills you learn in this article and/or video.\\n:::\\n\\n## Installing the Library\\n\\nThe first thing you need to do is download the scraping library from SourceForge. You can do this by going to http://simplehtmldom.sourceforge.net/ and clicking on \\"Download latest version from SourceForge\\".\\n\\n![Screenshot of simple html dom scraper in sourceforge](./2019-03-20-images/simple-html-dom-sourceforge.jpg)\\n\\nOnce you have downloaded the library from SourceForge, unzip the compressed folder. Then move the \\"simple_html_dom.php\\" file to the folder that you will be building the web scraper in.\\n\\n![Screenshot of unzipping library](./2019-03-20-images/unzip-library.jpg)\\n\\n## Writing the Scraping Code\\n\\nNow that we have our library installed we can begin writing our scraping code.\\n\\n```php\\n<?php\\n   # This imports and gives us access to the scraping library\\n   include(\'simple_html_dom.php\');\\n?>\\n```\\n\\nNow that we have access to the scraping library, we can use the file_get_html function to create a DOM object from a url.\\n\\n```php\\n<?php\\n   # This imports and gives us access to the scraping library\\n   include(\'simple_html_dom.php\');\\n   \\n   # Create HTML DOM object from url\\n   $html = file_get_html(\'https://google.com\');\\n?>\\n```\\n\\nWe can then pull specific elements from this DOM object by calling the find method and passing in the tag name of the element we would like to grab. We can also pass an index if we would like to grab only a single instance of a particular tag. If we want to grab an array of tags, we refrain from passing an index.\\n\\n```php\\n# Create HTML DOM object from url\\n$html = file_get_html(\'https://google.com\');\\n   \\n# Gets the 0th title element from the DOM object and echos it to the webpage\\necho $html->find(\'title\',0);\\n   \\n# If we don\'t pass an index we can get an array of all the anchor elements from the DOM object\\n$array_of_anchors = $html->find(\'a\');\\n   \\n# We can echo all of the anchor elements from the array above by using a simple for loop\\nfor( $i = 0; $i < sizeof($list_of_anchors); $i++ ){\\n   # echo each anchor by using the $i iterator to pull the anchor in each index position\\n   echo $list_of_anchors[$i];\\n}\\n```\\n\\nIn addition to selecting elements based on their tag name, we can select elements based on class or ID.\\n\\n```php\\n$html = file_get_html(\'https://google.com\');\\n    \\n$array_of_hidden_divs = $html->find(\'div[class=\\"hidden\\"]\');\\n    \\n$array_of_thumbnails = $html->find(\'img[id=\\"thumbnail\\"]\');\\n```\\n\\nThe find method returns a DOM object. This means that we can call the find method on itself to grab child elements.\\n\\n```php\\n$html = file_get_html(\'https://google.com\');\\n   \\n$ul = $html->find(\'ul\',0);\\n   \\n$array_of_li = $ul->find(\'li\');\\n   \\n# This is the same as above, but in a single line\\n$array_of_li = $html->find(\'ul\',0)->find(\'li\');\\n```\\n\\nWe can extract certain data such as the text of an element, or the hyperlink reference of an anchor tag, or the source of an image.\\n\\n```php\\n$html = file_get_html(\'https://google.com\');\\n    \\n$button_text = $html->find(\'button\',0)->plaintext;\\n \\n$anchor_href = $html->find(\'a\',0)->href;\\n \\n$image_source = $html->find(\'img\',0)->src;\\n```"},{"id":"input-validation-with-java","metadata":{"permalink":"/blog/input-validation-with-java","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2019-02-27-input-validation-with-java.mdx","source":"@site/blog/2019-02-27-input-validation-with-java.mdx","title":"Input validation with Java","description":"In this article I will be showing you how to perform validation on user input in Java. This article assumes that you have a basic understanding of Java and the Scanner class, and that you already have a compiler or IDE installed. I will be using JGrasp but you can use your favorite enviroment.","date":"2019-02-27T00:00:00.000Z","formattedDate":"February 27, 2019","tags":[{"label":"Java","permalink":"/blog/tags/java"}],"readingTime":3.09,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"input-validation-with-java","title":"Input validation with Java","authors":"jaymartin","tags":["Java"]},"unlisted":false,"prevItem":{"title":"Web Scraping with PHP","permalink":"/blog/web-scraping-with-php"}},"content":"In this article I will be showing you how to perform validation on user input in Java. This article assumes that you have a basic understanding of Java and the Scanner class, and that you already have a compiler or IDE installed. I will be using JGrasp but you can use your favorite enviroment.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/kLPBxtsf-b4\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n<br />\\n\\n# Input Validation with Java\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=kLPBxtsf-b4).\\n:::\\n\\nThe purpose of user validation is to make sure that the user inputs a value that is both the correct type and a valid value. For example: the user should not be allowed to center a negative number for their age. The user should also not be allowed to enter a String such as \\"Hello\\" for their age. The age must be a positive integer, or float, depending on the use case.\\n\\n```js title=\\"Code to read an int\\"\\n// must have imported the scanner class\\n// import java.util.*;\\npublic static int read_int(Scanner stdin, String prompt){\\n  int i = -1;\\n  while( i < 0 ){\\n    System.out.print(prompt);\\n \\n    String input = stdin.nextLine();\\n \\n    try{\\n      i = Integer.valueOf(input);\\n    } catch (NumberFormatException e) {\\n      i = -1;\\n    }\\n  }\\n  return i;\\n}// end read_int function\\n```\\n\\n```js title=\\"Code to read a float\\"\\n// must have imported the scanner class\\n// import java.util.*;\\npublic static float read_float(Scanner stdin, String prompt){\\n   float i = -1;\\n   while( i < 0 ){\\n      System.out.print(prompt);\\n \\n      String input = stdin.nextLine();\\n \\n      try{\\n         i = Float.valueOf(input);\\n      } catch (NumberFormatException e) {\\n         i = -1;\\n      }\\n   }\\n   return i;\\n}// end read_float function\\n```\\n\\n**On line 3** the function accepts a scanner object in addition to a string.\\n\\n**On line 4** we set a variable i which will hold our data value returned by the user. We initailize it at an invalid value so that our while loop will run.\\n\\n**On line 5** we continue looping until i is greater than 0. This could easily be changed if we wanted the integer to be in a different range.\\n\\n**On line 6** we ask our user for input by printing the prompt.\\n\\n**On line 8** we accept input as a string using the scanner. Note that this MUST be .nextLine() we cannot use .nextInt() or .nextFloat() or we will get an error.\\n\\n**On line 11** we attempt to convert the input string into an integer inside a try/catch block.\\n\\n**On line 13** we set the variable i to an invalid value so the while loop will continue to run. Line 13 will only be executed if the input String cannot be converted to an integer.\\n\\n```js title=\\"Using the read methods\\"\\n// sets up a new scanner object\\nScanner stdin = new Scanner(System.in);\\n \\n// calls the read_int function and passes in the scanner object and a text prompt\\nint age = read_int(stdin, \\"Enter your age: \\");\\n \\n// outputs the users age to the console\\nSystem.out.println(\\"Your age is: \\"+age);\\n```\\n\\n```js title=\\"Full code example\\"\\nimport java.util.*;\\npublic class Demo {\\n    public static void main(String[] args) {\\n        Scanner stdin = new Scanner(System.in);\\n \\n        float f = read_float(stdin, \\"Enter a float\\");\\n \\n        System.out.println(f);\\n    }\\n \\n    public static float read_float(Scanner stdin, String prompt) {\\n        float i = -1;\\n        while (i < 0) {\\n            System.out.print(prompt);\\n \\n            String input = stdin.nextLine();\\n \\n            try {\\n                i = Float.valueOf(input);\\n            } catch (NumberFormatException e) {\\n                i = -1;\\n            }\\n        }\\n        return i;\\n    }\\n}\\n```"}]}')}}]);