"use strict";(self.webpackChunkjaymartmedia=self.webpackChunkjaymartmedia||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"call-chatgpt-from-node-js","metadata":{"permalink":"/blog/call-chatgpt-from-node-js","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2024-11-22-call-chatgpt-api-from-node.md","source":"@site/blog/2024-11-22-call-chatgpt-api-from-node.md","title":"Call ChatGPT From NodeJS","description":"In this article I show you how to call the ChatGPT/OpenAI AI model from inside NodeJS.","date":"2024-11-22T00:00:00.000Z","formattedDate":"November 22, 2024","tags":[{"label":"AI","permalink":"/blog/tags/ai"},{"label":"OpenAI","permalink":"/blog/tags/open-ai"},{"label":"ChatGPT","permalink":"/blog/tags/chat-gpt"},{"label":"NodeJS","permalink":"/blog/tags/node-js"}],"readingTime":6.255,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"call-chatgpt-from-node-js","title":"Call ChatGPT From NodeJS","authors":"jaymartin","tags":["AI","OpenAI","ChatGPT","NodeJS"],"toc_max_heading_level":4},"unlisted":false,"nextItem":{"title":"Running Llama AI Model Locally","permalink":"/blog/running-llama-ai-model-locally"}},"content":"In this article I show you how to call the ChatGPT/OpenAI AI model from inside NodeJS.\\n\\nThis could be useful if you want to build a website or CLI tool that takes advantage of an AI model.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/dWZkQdD9hdE\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n<br />\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=dWZkQdD9hdE).\\n:::\\n\\n## Overview\\n\\nWe\'ll start out by setting up a new NPM project. Then we\'ll add the OpenAI library to our project and copy some code from their quickstart guide (https://platform.openai.com/). And finally we\'ll create an OpenAI account, create an API key, and buy some credits so we can use the API. I will say upfront, unfortunately we will need to buy at least $5 worth of credits to use the API. The nice thing is, those credits should last for many thousands of API calls (https://openai.com/api/pricing/).\\n\\n## Create a new NPM project\\n\\nYou will need to have Node and NPM installed in order to complete this step.\\n\\nI recommend using NVM or FNM to manage Node and NPM\\n- NVM (Linux/Unix): https://github.com/nvm-sh/nvm\\n- NVM (Windows): https://github.com/coreybutler/nvm-windows\\n- FNM: https://github.com/Schniz/fnm\\n\\nOnce you have Node/NPM installed, make a new directory where you would like to put your code:\\n```shell\\nmkdir openai-example\\ncd openai-example\\n```\\n\\nThen create the NPM project\\n```shell\\nnpm init -y\\n```\\n\\n## Setup Node script\\n\\nYou can refer to the OpenAI quickstart guide for the latest instructions, or follow the steps below: https://platform.openai.com/docs/quickstart\\n\\nAdd the openai library:\\n```shell\\nnpm install openai\\n```\\n\\nCreate the script in a file called main.js:\\n```js title=\\"main.js\\"\\nimport OpenAI from \\"openai\\";\\n\\nconst openai = new OpenAI();\\n\\nconst completion = await openai.chat.completions.create({\\n    model: \\"gpt-4o-mini\\",\\n    messages: [\\n        { role: \\"system\\", content: \\"You are a helpful assistant.\\" },\\n        {\\n            role: \\"user\\",\\n            content: \\"Write a haiku about recursion in programming.\\",\\n        },\\n    ],\\n});\\n\\nconsole.log(completion.choices[0].message);\\n```\\n\\nAdd type module, and a start script to the package.json file.\\n```json title=\\"package.json\\"\\n...\\n    \\"type\\": \\"module\\",\\n    \\"scripts\\": {\\n        \\"start\\": \\"node main.js\\"\\n    },\\n...\\n```\\n\\nNow run the script by running:\\n```shell\\nnpm run start\\n```\\n\\nYou should see an error mentioning that there is no token set. We\'ll do that in the next step.\\n\\n```txt\\nOpenAIError: The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: \'My API Key\' }).\\n```\\n\\n## Create OpenAI account, purchase credits, and create API key\\n\\nNow we need to create an account, purchase some credits, and get an API key in order to authenticate with the OpenAI API.\\n\\nTo do this:\\n1. Create an OpenAI account by\\n   1. Going to https://platform.openai.com/\\n   2. Click on Sign Up or Log In\\n   3. Create an account or connect with with one of the other supported accounts\\n2. Purchase some credits\\n   1. Click on the gear cog in the top right corner to open your settings\\n   2. Click \\"Billing\\" on the left sidebar\\n   3. Add to credit balance\\n   4. Purchase $5 or more worth of credits. Unfortunately OpenAI no longer offers free promotional credits. You can view pricing info for API calls here: https://openai.com/api/pricing/\\n3. Create an API secret key\\n   1. Click \\"API keys\\" on the left sidebar\\n   2. Click \\"+ Create new secret key\\" in the top right corner\\n   3. Enter a name for your API secret key\\n   4. Click \\"Create secret key\\"\\n   5. Copy the API secret key\\n4. Copy the API key and paste it into a \\".env\\" file (yes, the filename should start with a period/full-stop)\\n    ```txt title=\\".env\\"\\n    OPENAI_API_KEY=your_api_key_here\\n    ```\\n\\n## Use the API key in the Node script\\n\\nAdd the dotenv package to load the \\".env\\" file values as environment variables (you could also add as a system environment variable):\\n```shell\\nnpm install dotenv\\n```\\n\\nImport dotenv and call the config method in the \\"main.js\\" file:\\n```js {2,4} title=\\"main.js\\"\\nimport OpenAI from \\"openai\\";\\nimport dotenv from \\"dotenv\\";\\n\\ndotenv.config();\\nconst openai = new OpenAI();\\n...\\n```\\n\\nNow run the script by running:\\n```shell\\nnpm run start\\n```\\n\\nThe script should now succeed and display the response from ChatGPT. If the script returns with an error then you can refer to the [common issues](#common-issues) section.\\n\\n## Changing the model and adjusting the prompt\\n\\nYou likely want the model to do something other than generating a haiku about recursion. You can do this by changing the prompts that are passed to the model. The [system message](https://platform.openai.com/docs/guides/text-generation#system-messages) is typically set by the developer who is building the application. The [user message](https://platform.openai.com/docs/guides/text-generation#user-messages) is typically passed from the user of the application. You can read more about prompt engineering best practices in the [prompt engineering section of the](https://platform.openai.com/docs/guides/prompt-engineering) OpenAI documentation.\\n\\nYou may also want to change the AI model that is being used. You can do this by changing the model field. Available models can be found in the [models section of the](https://platform.openai.com/docs/models) OpenAI documentation.\\n\\n```js title=\\"main.js\\"\\n...\\nconst userPrompt = \\"programming\\"; // Could be populated from cli arguments, HTTP request body, or other user input\\nconst completion = await openai.chat.completions.create({\\n    model: \\"gpt-4o-mini\\", // Change the model (changes performance and pricing): https://platform.openai.com/docs/models\\n    messages: [\\n        { role: \\"system\\", content: \\"You are a helpful joke maker who tells people jokes. Generate me a joke about the following topic\\" }, // System prompt\\n        {\\n            role: \\"user\\",\\n            content: userPrompt, // Prompt that comes from the end user\\n        },\\n    ],\\n});\\n...\\n```\\n\\n## Conclusion\\n\\nIn this article we created an NPM project and Node script which uses the OpenAI library to interact with the ChatGPT AI model. We also created an OpenAI account and API key to authenticate with the API. Finally we ran a simple script which makes a call to ChatGPT via the OpenAI library and returns a response to the console.\\n\\n## Common issues\\n\\n### Token Not found\\n\\nIf you don\'t have a token, or your token is set incorrectly, you may see an error similar to this one:\\n\\n```txt\\nOpenAIError: The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: \'My API Key\' }).\\n```\\n\\nIf you see this message then you will need to [generate a token, set it in your \\".env\\" file](#create-openai-account-purchase-credits-and-create-api-key) and [use the token in your script](#use-the-api-key-in-the-node-script).\\n\\nThings to check:\\n- Ensure that the \\".env\\" file is named correctly and placed next to the package.json file\\n- Ensure that the \\".env\\" file contains the variable name and token value `OPENAI_API_KEY=abc123def456`\\n- Ensure that the lines `import dotenv from \\"dotenv\\"` and `dotenv.config()` are in your \\"main.js\\" file. The `dotenv.config()` file needs to be BEFORE the `const openai = new OpenAI()` line.\\n\\n### No funds\\nIf you run an API call before purchasing credits you may see an error similar to this one:\\n\\n```txt\\nRateLimitError: 429 You exceeded your current quota, please check your plan and billing details. For more information on this error, read the docs: https://platform.openai.com/docs/guides/error-codes/api-errors.\\n```\\n\\nIf you see this message then you will need to [purchase some credits](#create-openai-account-purchase-credits-and-create-api-key). You may also need to generate a new API token and set it in your \\".env\\" file after purchasing tokens. Per my testing, tokens created BEFORE credits are purchased do NOT work even after credits have been purchased."},{"id":"running-llama-ai-model-locally","metadata":{"permalink":"/blog/running-llama-ai-model-locally","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2024-11-14-running-llama-ai-model-locally.md","source":"@site/blog/2024-11-14-running-llama-ai-model-locally.md","title":"Running Llama AI Model Locally","description":"The Llama AI model is a free, self-hostable AI model built by Meta. It can be used similarly to how OpenAI\'s ChatGPT can be used. In this article we will run the Llama AI model locally via Docker. We will NOT configure Llama to use the GPU in this article.","date":"2024-11-14T00:00:00.000Z","formattedDate":"November 14, 2024","tags":[{"label":"AI","permalink":"/blog/tags/ai"},{"label":"Llama","permalink":"/blog/tags/llama"},{"label":"Self hosting","permalink":"/blog/tags/self-hosting"},{"label":"Local","permalink":"/blog/tags/local"}],"readingTime":4.19,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"running-llama-ai-model-locally","title":"Running Llama AI Model Locally","authors":"jaymartin","tags":["AI","Llama","Self hosting","Local"],"toc_max_heading_level":4},"unlisted":false,"prevItem":{"title":"Call ChatGPT From NodeJS","permalink":"/blog/call-chatgpt-from-node-js"},"nextItem":{"title":"Setting up an NGINX reverse proxy","permalink":"/blog/nginx-reverse-proxy"}},"content":"The [Llama AI model](https://www.llama.com/) is a free, self-hostable AI model built by Meta. It can be used similarly to how OpenAI\'s ChatGPT can be used. In this article we will run the Llama AI model locally via Docker. We will NOT configure Llama to use the GPU in this article.\\n\\n\x3c!--truncate--\x3e\\n\\n## Overview\\n\\nFirst we will run an [Ollama](https://ollama.com/) Docker container. Ollama is used as a wrapper around the AI models themselves. Then we will add the llama 3.2 model to the Ollama container. Once the model is running, we will interact with the Llama via HTTP using the cURL command line tool. Additionally I will show you how to add a code AI model and interact with it. Finally we will run a UI to make it easier to interact with the AI models (more similar to the ChatGPT UI. \\n\\n### Setup\\n\\nFor this tutorial you will need Docker and cURL (or Postman/Wget or other HTTP client) installed.\\n\\nYou can install Docker by following the [Docker documentation](https://docs.docker.com/get-started/get-docker/).\\n\\nYou can install cURL from the [cURL website](https://curl.se/download.html).\\n\\n### Running the Ollama container\\n\\nThe [Ollama Docker image](https://hub.docker.com/r/ollama/ollama) is available on the Docker hub.\\n\\nStart the container by running the following command in your terminal:\\n\\n```shell\\ndocker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama\\n```\\n\\nIf it\'s your first time, it will likely take a few minutes to pull the image from the Docker hub.\\n\\nBy default, the Ollama wrapper does not have any AI models installed. You can verify this by listing the installed models:\\n```shell\\ncurl http://localhost:11434/api/tags\\n```\\n\\n### Install the Llama 3.2 model\\n\\nA [list of available models](https://ollama.com/library) can be found on the Ollama website.\\n\\nThere are two ways to install a model. It can be done via an HTTP request or by running a command inside the Docker container,\\n\\nTo install a model via HTTP request (which I prefer) you can run the following cURL command via the terminal.\\n\\n```shell\\ncurl http://localhost:11434/api/pull -d \'{\\n    \\"name\\": \\"llama3.2\\"\\n}\'\\n```\\n\\nOtherwise you can install the model by executing a command in the Docker in either of two following ways.\\n\\n```shell\\ndocker exec -it ollama ollama run llama3.2\\n```\\nOR\\n```shell\\ndocker exec -it ollama bash\\n\\nollama run llama3.2\\n```\\n\\nYou can now verify that the model is installed by listing the installed models:\\n```shell\\ncurl http://localhost:11434/api/tags\\n```\\n\\n### Querying the AI model\\n\\nYou can query the model by making an HTTP request\\n\\n```shell\\ncurl http://localhost:11434/api/generate -d \'{\\n    \\"model\\": \\"llama3.2\\",\\n    \\"prompt\\": \\"Tell me a joke about AI models.\\",\\n    \\"stream\\": false\\n}\'\\n```\\n\\nIf you would like the response to come back as a stream (for example, to make the response feel faster, or allow partial response, or make it seem like the model is writing the response word by word) then you can exclude the \\"stream\\": false property in the request body.\\n\\n```shell\\ncurl http://localhost:11434/api/generate -d \'{\\n    \\"model\\": \\"llama3.2\\",\\n    \\"prompt\\": \\"Tell me a joke about AI models.\\"\\n}\'\\n```\\n\\n### Adding and querying a code model (or other model)\\n\\nYou can install a code generation model by running\\n\\n```shell\\ncurl http://localhost:11434/api/pull -d \'{\\n    \\"name\\": \\"qwen2.5-coder:7b\\"\\n}\'\\n```\\nOR\\n```shell\\n`docker exec -it ollama ollama run qwen2.5-coder:7b`\\n```\\n\\nThen you can query it by running the following (note the model property):\\n\\n```shell\\ncurl http://localhost:11434/api/generate -d \'{\\n    \\"model\\": \\"qwen2.5-coder:7b\\",\\n    \\"prompt\\": \\"Write me a js function to calculate the fibonacci sequence\\",\\n    \\"stream\\": false\\n}\'\\n```\\n\\nHere is a [list of other available models](https://ollama.com/library) that can be installed.\\n\\n### Running a UI for easier interaction\\n\\nObviously it\'s a little bit inconvenient to interact with the AI model via HTTP/cURL. It would be nice to have something more similar to the ChatGPT web UI. Fortunately there are a number of [community built integrations](https://github.com/ollama/ollama?tab=readme-ov-file#community-integrations) that can do just that (more or less)! The one we will be using in this article is [Open WebUI](https://github.com/open-webui/open-webui).\\n\\nRun the following command to run Open WebUI locally\\n\\n```shell\\ndocker run -d -p 3000:8080 --add-host=host.docker.internal:host-gateway -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main\\n```\\n\\nIn your browser, go to http://localhost:3000 and you should see the sign in page for Open WebUI. You will need to click \\"Sign up\\" to create an account when you first run and use Open WebUI (The tool indicates that the account data will be stored locally, but I have not personally read through the code and verified this).\\n\\nOnce you are logged in, you can create a new chat. You can select the AI model in the dropdown in the top left corner of the chat. It seems that Open WebUI uses the \\"/api/tags\\" endpoint to get a list of the installed models.\\n\\nOnce the desired model is selected you can query it via the text box in the middle of the screen!\\n\\n### Conclusion\\n\\nIn this article I showed how to:\\n1. Run an Ollama Docker container\\n2. Install some AI models in the Ollama container (llama3.2 and qwen2.5-coder)\\n3. Query the different AI models\\n4. Run Open WebUI to give us an easier interface with the AI models\\n\\nI hope you found the article helpful!"},{"id":"nginx-reverse-proxy","metadata":{"permalink":"/blog/nginx-reverse-proxy","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2024-04-16-nginx-reverse-proxy.md","source":"@site/blog/2024-04-16-nginx-reverse-proxy.md","title":"Setting up an NGINX reverse proxy","description":"In this article we will set up an NGINX reverse proxy which will allow us to serve multiple sites on port 80 and 443 (default http/https ports) from a single server.","date":"2024-04-16T00:00:00.000Z","formattedDate":"April 16, 2024","tags":[{"label":"NGINX","permalink":"/blog/tags/nginx"},{"label":"Linode","permalink":"/blog/tags/linode"}],"readingTime":22.765,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"nginx-reverse-proxy","title":"Setting up an NGINX reverse proxy","authors":"jaymartin","tags":["NGINX","Linode"],"toc_max_heading_level":4},"unlisted":false,"prevItem":{"title":"Running Llama AI Model Locally","permalink":"/blog/running-llama-ai-model-locally"},"nextItem":{"title":"Welcome to the blog","permalink":"/blog/welcome-to-the-blog"}},"content":"In this article we will set up an NGINX reverse proxy which will allow us to serve multiple sites on port 80 and 443 (default http/https ports) from a single server.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/m1MWjPKS5NM\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n<br />\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=m1MWjPKS5NM).\\n:::\\n\\n## Overview\\n\\n- Pre-configuration:\\n    - Configure a Linode Nanode VPS (optional)\\n    - Install Docker (optional)\\n    - Run some example sites (optional)\\n- Set up DNS to point domain names at the server public IP address\\n- Install NGINX on the server\\n- Walk through setting up NGINX as a reverse proxy in a step-by-step manner\\n- Use Certbot to install TLS certificates for NGINX (technically optional)\\n\\nEach of these steps will follow a step by step manner with validation in between. I feel that small steps make it easier to understand what each change does, and makes it easier to debug if needed.\\n\\nThis article begins by configuring a server with the prerequisites for the demonstration. These first steps (Linode, Docker, example sites in Docker) are all optional if you already have an existing server running some web sites. But you can always spin up a Nanode instance for a few hours to follow the tutorial, then delete it once you\'re done. At the time of writing, a single Nanode costs ~$0.18 per day.\\n\\nAfter the initial configuration we will create some DNS A records to point the domain names at the public IP address of the server. If you don\'t own a domain, I also explain how to use the hosts file to work around this locally.\\n\\nThen we will install NGINX on the server, in this article we are using Linux, but you should be able to do [something similar with NGINX on Windows](https://medium.com/@chandramuthuraj/installing-nginx-on-windows-a-step-by-step-guide-6750575c63e2). Once NGINX is installed, we will look at the default configuration. Then we will configure NGINX as a reverse proxy.\\n\\nFinally we will enable HTTPS on the reverse proxy using Certbot. Certbot does appear to be [compatible with Windows](https://certbot.eff.org/instructions?ws=nginx&os=windows) although I have not used Certbot on Windows myself.\\n\\n### What is a reverse proxy and why would I need one?\\n\\nOnly a single process can listen on a specific port, in fact the purpose of a port is to specify which process a TCP/UDP packet/datagram should go to.\\n\\nFor that reason, if multiple sites are running on a server, they must each be running on a different port.\\n\\nSetting up a reverse proxy will allow all requests to be sent to the reverse proxy on the default HTTP/HTTPS ports (80, 443) and then forwarded to the respective app based on the value of the host header. This way the end user does not need to remember the port number for each site, they only need to remember the domain name.\\n\\n#### Architecture diagram\\n\\nOn the right side of the diagram is the server on which the sites are running. The bottom section of the server shows each site and the port they are listening on (RED instance, GREEN instance, BLUE instance, etc.), the top section shows the NGINX reverse proxy listening on ports 80 and 443.\\n\\nThe red bounding box shows how requests are routed without the use of a reverse proxy. Without a reverse proxy the requests are routed to each site based on the port of the request. The down side of this approach is that users must know the port that each site is running on. Most users aren\'t even aware of the concept of a port, so this will be confusing and lead to a bad user experience.\\n\\nThe blue bounding box shows how requests are routed when using a reverse proxy. In this case the reverse proxy is listening on ports 80 and 443, the default HTTP and HTTPS ports. This means that users do not need to provide a port number, since when the port is excluded, the default port for the protocol is used. Since all requests use the same ports, the reverse proxy will use the host header to route the request to the specific site. The host header is included in each request by the HTTP client (browser or otherwise) that the user is using. When the reverse proxy receives the request, it looks at the host header, checks the mapping, and proxies the request to the proper site.\\n\\n![architecture diagram of reverse proxy vs. no reverse proxy](./nginx-reverse-proxy/reverse-proxy-architecture.svg)\\n\\n## Pre-configuration\\n\\nThe Linode, Docker and example app set up steps are completely optional.\\n\\nWe are using Linode in this article because it\'s cheap and easy to get a server up and running with a public IP address. If you have an existing VPS, or physical server/computer on your home network then you can use that.\\n\\nWe will use Docker as a simple way to run multiple site to demonstrate how the reverse proxy works. If you\'re watching this video, you likely already have multiple sites running that you would like to put the reverse proxy in front of. You are welcome to follow through the Docker steps as a way to get some hands-on experience as part of the tutorial, or you can just use your existing sites.\\n\\n### Linode VPS (optional)\\n\\nWe\'ll be using a [Linode](https://www.linode.com/) Nanode (small VPS) running Debian 12 for this article. As mentioned above, nothing in this video is specific to Linode, so you can use any cloud provider of your choosing, or you could run this on your own server.\\n\\n![screenshot of linode nanode configuration](./nginx-reverse-proxy/linode.jpg)\\n\\n### Install Docker (optional)\\n\\nThe following steps to set up Docker on Debian were taken from the Docker site. Feel free to refer to the [first-party documentation](https://docs.docker.com/engine/install/debian/).\\n\\nTo check if you have Docker installed already on your server, you can run `docker --version`. If this returns a Docker version, then you may be good to go, otherwise you can follow the steps below.\\n\\n```sh\\n# Install docker: https://docs.docker.com/engine/install/debian/\\n# Setup apt repositories for docker\\nsudo apt-get update\\nsudo apt-get install ca-certificates curl\\nsudo install -m 0755 -d /etc/apt/keyrings\\nsudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc\\nsudo chmod a+r /etc/apt/keyrings/docker.asc\\n\\n# Add the repository to Apt sources:\\necho \\\\\\n  \\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\\\\\n  $(. /etc/os-release && echo \\"$VERSION_CODENAME\\") stable\\" | \\\\\\n  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\\nsudo apt-get update\\n\\n# Install docker\\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\\n\\n# Test docker\\nsudo docker run hello-world\\n```\\n\\n### Startup example sites in Docker (optional)\\n\\nIf you have chosen to install Docker, you can use the following commands to run three instances of the [micro-express](https://hub.docker.com/r/jaymartmedia/micro-express) Docker container which can be used to test the reverse proxy. These commands will set up the containers to listen on ports 5000, 5001, 5002 and each return a unique message to indicate which container received the request. You can change the INSTANCE_ID and MESSAGE environment variables to be something more memorable/meaningful to you if you want to.\\n\\n```sh\\ndocker run -d -p 5000:3000 --name 000 -e MESSAGE=\\"Hello from instance RED\\"   -e INSTANCE_ID=\\"RED\\"   jaymartmedia/micro-express:0.0.1\\ndocker run -d -p 5001:3000 --name 001 -e MESSAGE=\\"Hello from instance GREEN\\" -e INSTANCE_ID=\\"GREEN\\" jaymartmedia/micro-express:0.0.1\\ndocker run -d -p 5002:3000 --name 002 -e MESSAGE=\\"Hello from instance BLUE\\"  -e INSTANCE_ID=\\"BLUE\\"  jaymartmedia/micro-express:0.0.1\\ndocker run -d -p 5003:3000 --name 003 -e MESSAGE=\\"Hello from instance ROOT\\"  -e INSTANCE_ID=\\"ROOT\\"  jaymartmedia/micro-express:0.0.1\\n```\\n\\nRun the following CURL commands on the server to test the containers\\n\\n```sh\\ncurl localhost:5000 # Should return \\"Hello from instance RED\\"   (or the message you specified if you change it)\\ncurl localhost:5001 # Should return \\"Hello from instance GREEN\\" (or the message you specified if you change it)\\ncurl localhost:5002 # Should return \\"Hello from instance BLUE\\"  (or the message you specified if you change it)\\ncurl localhost:5003 # Should return \\"Hello from instance ROOT\\"  (or the message you specified if you change it)\\n```\\n\\nRun the following CURL commands from another machine (or enter each URL in your browser) to make sure that your app is publicly accessible. If you are using a computer on your home network as the server then you will have to set it up to be publicly accessible, likely by configuring NAT rules in your router. This is outside of the scope of this tutorial, but you can refer to [this superuser answer](https://superuser.com/a/965590) and Google \\"\\\\{router model\\\\} NAT setup\\" to get you started in the correct direction. You don\'t need any special set up for the client.\\n\\n```sh\\n# Replace 50.116.47.185 with the public IP address of the server.\\n# You could also go to 50.116.47.185:5000 in your browser if you don\'t have CURL installed\\ncurl 50.116.47.185:5000 # Should return \\"Hello from instance RED\\"\\ncurl 50.116.47.185:5001 # Should return \\"Hello from instance GREEN\\"\\ncurl 50.116.47.185:5002 # Should return \\"Hello from instance BLUE\\"\\ncurl 50.116.47.185:5003 # Should return \\"Hello from instance ROOT\\"\\n```\\n\\n## DNS\\n\\nThe Domain Name System is used to point human-readable domain names to specific IP addresses. DNS also does other things, but pointing domain names to IPv4 addresses with \\"A records\\" is all we will be doing in this article.\\n\\n### Set up DNS\\n\\n:::info[Workaround if you don\'t have a domain]\\nIf you don\'t have a domain name, you can buy one now or just skip down to the [hosts file section](#edit-the-hosts-file-if-you-dont-have-a-domain) to use a work-around.\\n:::\\n\\nIf you own a domain name, you will need to create \\"A records\\" which point to the public IP address of your server. If your domain is in use, then you can use subdomains as I have in some of the examples below. For TTL (time-to-live) any value works, but for testing frequent changes low values such as 300-600 seconds (5-10 minutes) is convenient. The screenshots below show examples of both a root domain (crewviewer.com) as well as subdomains (red.jaymartmedia.com, green.crewviewer.com, etc.).\\n\\nExample of A record in CPanel:\\n![A record in CPanel](nginx-reverse-proxy/cpanel-dns.jpg)\\n\\nExample of A record in Namecheap:\\n![A records in Namecheap](nginx-reverse-proxy/namecheap-dns.jpg)\\n\\nOnce the A records are set up, they can take some time to [propagate](https://www.digicert.com/faq/dns/what-is-dns-propagation). You can use a tool such as https://dnschecker.org/ to check whether they have propagated.\\n\\n:::info[Workaround if you don\'t have a domain]\\n### Edit the hosts file if you don\'t have a domain\\nIf you don\'t have a domain name yet, you can test via manual host file changes on the client. These changes will only take effect for the system where the host file change is made.\\n\\nIn short you will need to open \\"/etc/hosts\\" (Linux) or \\"c:\\\\windows\\\\system32\\\\drivers\\\\etc\\\\hosts\\" (Windows) in admin mode and add a line such as \\"50.116.47.185 green.crewviewer.com\\". You will need to replace the IP address in the example with the public IP address of your server.\\n\\nRead this article for more info about how to edit your host file: https://www.howtogeek.com/27350/beginner-geek-how-to-edit-your-hosts-file/\\n:::\\n\\n### Validate DNS\\n\\nOnce the DNS A records have propagated (or you have edited your hosts file) you can visit the domains. Since the reverse proxy hasn\'t been set up yet, you will also have to specify the port:\\n- http://red.jaymartmedia.com:5000 - \\"Hello from instance RED\\"\\n- http://green.crewviewer.com:5001 - \\"Hello from instance GREEN\\"\\n- http://blue.crewviewer.com:5002 - \\"Hello from instance BLUE\\"\\n- http://crewviewer.com:5003 - \\"Hello from instance ROOT\\"\\n\\nSince the domains are all just pointing at the same IP address and only using port to differentiate the site, you could also do:\\n- http://red.jaymartmedia.com:5003 - \\"Hello from instance ROOT\\"\\n\\nYou could also use any of the other domain name + port combinations. The site is determined strictly based on the port (as shown in the red section of architecture diagram). \\n\\nThis is likely not the desired configuration for two reasons:\\n- The red.jaymartmedia.com domain should only point to the RED instance, NOT root\\n- The need to include the port is inconvenient and users would need to know what port they need to use\\n\\nThe NGINX reverse proxy will solve both of these issues.\\n\\n### Host header\\n\\nFor each request that is made, the HTTP client (CURL, or the browser) will add a host header which is equal to the domain name that the request is made to. Below is a screenshot of the host header that is set by the browser when we visit red.crewviewer.com.\\n\\n![Screenshot of red.crewviewer.com host header in the browser](./nginx-reverse-proxy/red-crewviewer-com-host.jpg)\\n\\nIn one of the following steps we will configure NGINX to proxy the request to a specific site based on the host header that is set by the client.\\n\\n## NGINX\\n\\nNGINX is a web-server software product that contains a lot of functionality such as serving static pages, some server-side pages, load balancing, and acting as a reverse proxy (what we\'ll be using). NGINX has some paid products, in this article we will be using [NGINX open-source](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/).\\n\\n### Install NGINX\\n\\nWe can run the following commands to start and run NGINX on Debian.\\n\\n```sh\\n# Install nginx: https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\\nsudo apt update\\nsudo apt install nginx\\n\\n# May not be required\\nsudo systemctl start nginx\\n```\\n\\n### Validate default NGINX configuration\\n\\nTest NGINX on the server via localhost and we should see the default NGINX welcome page.\\n\\n```sh\\ncurl localhost:80\\n```\\n\\nWe can also reach NGINX remotely via the public IP address as well as the DNS records that we set up earlier. Since NGINX runs on port 80 by default, and port 80 is the default http port, we don\'t need to specify the port. This is how users visit most other sites on the web. Since all of the following urls default to port 80, they all return the same default NGINX welcome page.\\n\\n```sh\\ncurl http://50.116.47.185\\ncurl http://red.jaymartmedia.com\\ncurl http://green.crewviewer.com\\ncurl http://blue.crewviewer.com\\ncurl http://crewviewer.com\\n```\\n\\n### Understand the default NGINX configuration\\n\\nNGINX comes with a default configuration. We can view the configuration which is stored in the \\"/etc/nginx/sites-enabled/default\\" file by running `cat /etc/nginx/sites-enabled/default`.\\n\\n```nginx title=\\"/etc/nginx/sites-enabled/default\\"\\nserver {\\n    listen 80 default_server;\\n    listen [::]:80 default_server;\\n\\n    root /var/www/html;\\n\\n    index index.html index.htm index.nginx-debian.html;\\n\\n    server_name _;\\n\\n    location / {\\n            # First attempt to serve request as file, then\\n            # as directory, then fall back to displaying a 404.\\n            try_files $uri $uri/ =404;\\n    }\\n}\\n\\n```\\n\\nWe can see that the default configuration root path loads an html file from \\"/var/www/html/index.nginx-debian.html\\". We can view this default html file by running `cat /var/www/html/index.nginx-debian.html`.\\n\\n```html title=\\"/var/www/html/index.nginx-debian.html\\"\\n<!DOCTYPE html>\\n<html>\\n    <head>\\n        <title>Welcome to nginx!</title>\\n        <style>\\n            html { color-scheme: light dark; }\\n            body { width: 35em; margin: 0 auto;\\n            font-family: Tahoma, Verdana, Arial, sans-serif; }\\n        </style>\\n    </head>\\n    <body>\\n        <h1>Welcome to nginx!</h1>\\n        <p>If you see this page, the nginx web server is successfully installed and\\n        working. Further configuration is required.</p>\\n\\n        <p>For online documentation and support please refer to\\n        <a href=\\"http://nginx.org/\\">nginx.org</a>.<br/>\\n        Commercial support is available at\\n        <a href=\\"http://nginx.com/\\">nginx.com</a>.</p>\\n\\n        <p><em>Thank you for using nginx.</em></p>\\n    </body>\\n</html>\\n\\n```\\n\\nNotice that this is the same file that is returned by NGINX when we run `curl localhost`.\\n\\nWe will now delete this file so that we can write our own configuration file to set up the reverse proxy: `rm /etc/nginx/sites-enabled/default`\\n\\n### Configure NGINX as a reverse proxy\\n\\nWe will configure the reverse proxy to proxy requests based on the host header rather than the port.\\n\\nWe will write our own configuration file to set up the reverse proxy. You can use nano, or any other visual or command line text editor. We will put the file in the \\"/etc/nginx/conf.d\\" directory and use the \\".conf\\" extension so that NGINX will load our configuration file automatically when it is started.\\n\\n\\n#### Initial reverse proxy set up\\n\\nWe will add a server block to specify how NGINX should behave:\\n- **Line 4**: Specify the port for this server block to listen on. This should be port 80 since that is the default HTTP port.\\n- **Line 6**: Specify the server/host name that the server block should handle (red.jaymartmedia.com). Since we only have a single server block, this block will be treated as the default so ALL requests to port 80 will be handled here.\\n- **Line 10**: Specify what the server block should do with any requests to the root path and below (essentially any path). In this case we are sending the requests to \\"localhost:5000\\" which is where the RED instance is running.\\n\\n```nginx title=\\"/etc/nginx/conf.d/default.conf\\" showLineNumbers\\n### red.jaymartmedia.com\\nserver {\\n    # Port that the reverse proxy will listen on\\n    listen 80;\\n    # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.)\\n    server_name red.jaymartmedia.com;\\n\\n    location / {\\n        # Upstream server/site that the reverse proxy will connect to\\n        proxy_pass http://localhost:5000;\\n    }\\n}\\n```\\n\\nWe can restart NGINX by running `sudo systemctl restart nginx`.\\n\\nBefore when we made requests to this server on port 80, NGINX responded with the default NGINX welcome page. Now that we removed the default NGINX configuration and configured NGINX to be a reverse proxy, the requests will be proxied to the RED instance and we will get a response from the RED instance.\\n\\n```sh\\ncurl http://50.116.47.185 # Hello from instance RED\\ncurl http://red.jaymartmedia.com # Hello from instance RED\\ncurl http://green.crewviewer.com # Hello from instance RED\\ncurl http://blue.crewviewer.com # Hello from instance RED\\ncurl http://crewviewer.com # Hello from instance RED\\n```\\n\\nNotice that all of the above requests reach the RED instance since the red server block is the default server block. We can fix this by explicitly defining a default server block.\\n\\n#### Adding a default server block\\n\\nWe can define a default server block to handle any requests which do not match any server_names in any of the server blocks.\\n\\nWe can explicitly define a server block by using the keyword \\"default_server\\" (line 3). If we do not explicitly define the server block, NGINX will use the first server block by default.\\n\\nThis server block will also match requests on port 80. Only a single process can listen on a specific port, in fact the purpose of a port is to specify which process a TCP/UDP packet/datagram should go to. That is why we need the reverse proxy in the first place. In this case, since both server blocks are used by the same NGINX process, it is fine for multiple server blocks to match on port 80.\\n\\n\\"return 502\\" (line 4) will cause NGINX to return a \\"502 Bad Gateway\\" response to any requests which don\'t match any of the server_names.\\n\\n```nginx title=\\"/etc/nginx/conf.d/default.conf\\" showLineNumbers {1-5}\\n### Default server\\nserver {\\n    listen 80 default_server;\\n    return 502;\\n}\\n\\n### red.jaymartmedia.com\\nserver {\\n    # Port that the reverse proxy will listen on\\n    listen 80;\\n    # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.)\\n    server_name red.jaymartmedia.com;\\n\\n    location / {\\n        # Upstream server/site that the reverse proxy will connect to\\n        proxy_pass http://localhost:5000;\\n    }\\n}\\n```\\n\\nWe can restart NGINX by running `sudo systemctl restart nginx`.\\n\\nBefore when we made requests to this server on port 80, all requests were proxied to the RED instance and we got a response from the RED instance. Now any requests with the \\"host: red.jaymartmedia.com\\" header will be proxied to the RED instance, but all other requests will use the default server block which returns the \\"502 Bad Gateway\\" response.\\n\\n```sh\\ncurl http://50.116.47.185 # 502 Bad Gateway\\ncurl http://red.jaymartmedia.com # Hello from instance RED\\ncurl http://green.crewviewer.com # 502 Bad Gateway\\ncurl http://blue.crewviewer.com # 502 Bad Gateway\\ncurl http://crewviewer.com # 502 Bad Gateway\\n```\\n\\n#### Adding server blocks for more sites\\n\\nWe can duplicate the second server block and change the server_name and proxy_pass port values as needed for each site.\\n\\n```nginx title=\\"/etc/nginx/conf.d/default.conf\\" {20-44}\\n### Default server\\nserver {\\n    listen 80 default_server;\\n    return 502;\\n}\\n\\n### red.jaymartmedia.com\\nserver {\\n    # Port that the reverse proxy will listen on\\n    listen 80;\\n    # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.)\\n    server_name red.jaymartmedia.com;\\n\\n    location / {\\n        # Upstream server/site that the reverse proxy will connect to\\n        proxy_pass http://localhost:5000;\\n    }\\n}\\n\\n### green.crewviewer.com\\nserver {\\n    # Port that the reverse proxy will listen on\\n    listen 80;\\n    # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.)\\n    server_name green.crewviewer.com;\\n\\n    location / {\\n        # Upstream server/site that the reverse proxy will connect to\\n        proxy_pass http://localhost:5001;\\n    }\\n}\\n\\n### crewviewer.com\\nserver {\\n    # Port that the reverse proxy will listen on\\n    listen 80;\\n    # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.)\\n    server_name crewviewer.com;\\n\\n    location / {\\n        # Upstream server/site that the reverse proxy will connect to\\n        proxy_pass http://localhost:5003;\\n    }\\n}\\n```\\n\\nWe can restart NGINX by running `sudo systemctl restart nginx`.\\n\\nBefore when we made requests to this server, red.jaymartmedia.com went to RED instance, and all other requests went to the default server and returned 502 bad gateway errors. Now, after adding more server blocks, any requests with a host header which matches a server_names specified will go to the respective pod and any requests that don\'t match will go to the default server block.\\n\\n```sh\\ncurl http://50.116.47.185 # 502 Bad Gateway\\ncurl http://red.jaymartmedia.com # Hello from instance RED\\ncurl http://green.crewviewer.com # Hello from instance GREEN\\ncurl http://blue.crewviewer.com # 502 Bad Gateway\\ncurl http://crewviewer.com # Hello from instance ROOT\\n```\\n\\nWe can also explicitly set the host header using CURL so that our request matches a server name:\\n```sh\\ncurl http://50.116.47.185 -H \\"host: red.jaymartmedia.com\\" # Hello from instance RED\\n```\\n\\nI won\'t set up the server blocks for the other domains (because the default.conf file is getting big \ud83d\ude01), but by now it should be fairly clear how that would be done.\\n\\n## HTTPS (technically optional)\\n\\nSo far all of our requests have used HTTP on port 80. This is fine for some sites, but it means that data moves across the network unencrypted which can allow other people to see your traffic. This is terrible for any security sensitive sites, for obvious reasons.\\n\\nWe can configure NGINX to handle HTTPS requests using a tool called Certbot. HTTPS encrypts traffic which prevents other people from viewing all of your traffic. By default HTTPS uses port 443.\\n\\n:::warning[Workaround if you don\'t have a domain]\\nUnfortunately Certbot will only work if you have a domain, it will not work if you used the host file workaround. This is because the domain needs to be in the public DNS and accessible from the Let\'s Encrypt servers, but the host file change only applies to the computer that the change is made on.\\n:::\\n\\n### Install Certbot\\n\\n[Certbot](https://certbot.eff.org/) handles validation of your domain, installing the TLS certificate, and automatic renewal of the TLS certificate. Certbot uses a free TLS certificate authority called [Let\'s Encrypt](https://letsencrypt.org/).\\n\\nThe following commands install a package manager called Snap, remove old versions of Certbot, then install and set up Certbot.\\n\\n```sh\\n# Install snapd: https://snapcraft.io/docs/installing-snap-on-debian\\nsudo apt update\\nsudo apt install snapd\\n# Uninstall old versions of certbot\\nsudo apt-get remove certbot\\n# Install certbot: https://certbot.eff.org/instructions?ws=nginx&os=debianbuster\\nsudo snap install --classic certbot\\n# Link certbot as executable bin\\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\\n```\\n\\n### Use Certbot to add TLS certificates for each domain\\n\\nThe Certbot command line tool can be used to install TLS certs. The [Certbot website](https://certbot.eff.org/instructions?ws=nginx&os=debianbuster) has a helpful wizard style UI to give specific instructions based on your web server and operating system.\\n\\nThe CLI tool has multiple options, it can install the cert but allow us to manually update the NGINX config file, or it can install the cert and automatically update the NGINX config file. We\'ll walk through both methods in this article.\\n\\n#### Manually update the NGINX config file\\n\\nManually updating the NGINX config file to reference the TLS certificates may help to understand how it is set up. But once we understand what\'s going on, the convenience of the automatic command is very nice.\\n\\nRun the following command on the server. Certbot will be prompt for a few options such as adding an email for upcoming expiration alerts, terms of service agreement, marketing email opt in/out, and selecting the domain that we want to get the certificate for.\\n\\n```sh\\n# Install cert\\nsudo certbot certonly --nginx\\n# Enter email for warnings, Y to agree to ToS, Y/N for marketing emails, select the domain\\n```\\n\\nOnce the cert is installed, we will have to reference it from the NGINX configuration file. We can view the certificate and key by running the following commands:\\n- `ls /etc/letsencrypt/live/\\\\{domain/host name\\\\}/`\\n- `cat /etc/letsencrypt/live/\\\\{domain/host name\\\\}/fullchain.pem`\\n- `cat /etc/letsencrypt/live/\\\\{domain/host name\\\\}/privkey.pem`\\n\\nThese changes will be made to the existing config file, it will not completely replace the existing file. Update the default.conf file by adding a new server block that matches HTTPS requests on port 443 (lines 14-24). And update the port 80 server block to redirect to the page using HTTPS (lines 10-11).\\n\\n```nginx title=\\"/etc/nginx/conf.d/default.conf\\" showLineNumbers {10-11,14-24}\\n...\\n\\n### red.jaymartmedia.com\\nserver {\\n    # Port that the reverse proxy will listen on\\n    listen 80;\\n    # Hostname that this server block should respond to (i.e. example.com, test.example.com, etc.)\\n    server_name red.jaymartmedia.com;\\n\\n    # Redirect to https version and retains path\\n    return 301 https://$host$request_uri;\\n}\\n\\nserver {\\n    listen 443 ssl;\\n    server_name red.jaymartmedia.com;\\n\\n    ssl_certificate /etc/letsencrypt/live/red.jaymartmedia.com/fullchain.pem;\\n    ssl_certificate_key /etc/letsencrypt/live/red.jaymartmedia.com/privkey.pem;\\n\\n    location / {\\n        proxy_pass http://localhost:5000;\\n    }\\n}\\n\\n...\\n```\\n\\nWe can restart NGINX by running `sudo systemctl restart nginx`.\\n\\nWe can verify that HTTPS is set up for red.jaymartmedia.com, and if we try to go to https://green.crewviewer.com we will get a timeout since we haven\'t set up for that domain yet.\\n\\n```sh\\ncurl http://red.jaymartmedia.com # 301 redirect to https://red.jaymartmedia.com\\ncurl https://red.jaymartmedia.com # Hello from instance RED\\ncurl https://green.crewviewer.com # Will timeout since there are no server blocks that match green.crewviewer.com on port 443\\n```\\n\\nIf you go to http://red.jaymartmedia.com in your browser it should automatically redirect you to the page via HTTPS.\\n\\n#### Allow Certbot to automatically update the NGINX config file\\n\\nBefore running the automatic certbot command we will backup our existing configuration file so we can compare the configuration files to see the changes that certbot makes.\\n\\n`cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bkp`\\n\\nRun the following command on the server. If this is the first time that certbot is run, Certbot will prompt for a few options such as adding an email for upcoming expiration alerts, terms of service agreement, and marketing email opt in/out. Then Certbot will prompt for the domain that we want to get the certificate for.\\n\\n```sh\\n# Install cert\\nsudo certbot --nginx\\n# Enter email for warnings, Y to agree to ToS, Y/N for marketing emails, select the domain\\n```\\n\\nRun the following command to show the changes that NGINX made.\\n\\n`diff /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bkp`\\n\\nHere is what the changes will likely look like.\\n\\n```nginx title=\\"/etc/nginx/conf.d/default.conf changes\\" showLineNumbers {1-1}\\nTBD diff\\n```\\n\\nWe can verify that HTTPS is set up for green.crewviewer.com.\\n\\n```sh\\ncurl http://green.crewviewer.com # 301 redirect to https://green.crewviewer.com\\ncurl https://green.crewviewer.com # Hello from instance GREEN\\n```\\n\\nIf we go to http://green.crewviewer.com in the browser it should automatically redirect us to the page via HTTPS.\\n\\n## Summary\\n\\nIn this article we:\\n- Set up DNS records to point at the IP address of a server\\n- Installed NGINX on the server\\n- Learned about the default NGINX configuration\\n- Configured NGINX as a reverse proxy using host headers to differentiate sites\\n- Used Certbot to install Let\'s Encrypt TLS certificates for our domains\\n- Configured NGINX (manually and automatically) to use the TLS certificates to enable HTTPS on our sites"},{"id":"welcome-to-the-blog","metadata":{"permalink":"/blog/welcome-to-the-blog","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2023-12-31-welcome.md","source":"@site/blog/2023-12-31-welcome.md","title":"Welcome to the blog","description":"Welcome to the blog! I probably won\'t post here more than a few times a year. I will primarily use this as a place to put text companions to YouTube videos.","date":"2023-12-31T00:00:00.000Z","formattedDate":"December 31, 2023","tags":[],"readingTime":0.16,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"welcome-to-the-blog","title":"Welcome to the blog","authors":"jaymartin","tags":[]},"unlisted":false,"prevItem":{"title":"Setting up an NGINX reverse proxy","permalink":"/blog/nginx-reverse-proxy"},"nextItem":{"title":"Multistream with OBS and FFMPEG","permalink":"/blog/multistream-ffmpeg"}},"content":"Welcome to the blog! I probably won\'t post here more than a few times a year. I will primarily use this as a place to put text companions to YouTube videos.\\n\\n\x3c!--truncate--\x3e"},{"id":"multistream-ffmpeg","metadata":{"permalink":"/blog/multistream-ffmpeg","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2019-05-22-multistream.mdx","source":"@site/blog/2019-05-22-multistream.mdx","title":"Multistream with OBS and FFMPEG","description":"This is a text companion to a YouTube video about streaming to multiple channels at once using OBS and FFMPEG.","date":"2019-05-22T00:00:00.000Z","formattedDate":"May 22, 2019","tags":[{"label":"FFMPEG","permalink":"/blog/tags/ffmpeg"},{"label":"OBS","permalink":"/blog/tags/obs"}],"readingTime":1.75,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"multistream-ffmpeg","title":"Multistream with OBS and FFMPEG","authors":"jaymartin","tags":["FFMPEG","OBS"]},"unlisted":false,"prevItem":{"title":"Welcome to the blog","permalink":"/blog/welcome-to-the-blog"},"nextItem":{"title":"Web Scraping with PHP","permalink":"/blog/web-scraping-with-php"}},"content":"This is a text companion to a YouTube video about streaming to multiple channels at once using OBS and FFMPEG.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/6HAnG_BG3F4\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n# Multistream with OBS and FFMPEG\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=6HAnG_BG3F4).\\n:::\\n\\n<a href=\\"http://jaymartmedia.com/multistream/multistreamgui.exe\\"><button class=\\"w3-button w3-green\\">Download MultiStream GUI</button></a>\\n\\nIf you would like to use a batch script that you can audit, you can use the following script.\\n\\n```batch title=\\"multistream.bat\\"\\n@echo off\\n \\n:: Find more information at http://jaymartmedia.com/multistream/\\n \\n:: Change this to the path to the folder in which OBS saves the recording (should end in \\"\\\\\\") make sure that there is no space beside the \\"=\\" sign\\n:: Format looks like:     C:\\\\Users\\\\waver\\\\Videos\\\\\\nset folder_path=C:\\\\Users\\\\waver\\\\Videos\\\\\\n \\n:: Change this to the RTMP url that you would like to stream to (should end in \\"/\\") make sure there is no space beside the \\"=\\" sign\\n:: Common ingest servers\\n:: YouTube:           rtmp://a.rtmp.youtube.com/live2/\\n:: Twitch - Atlanta:  rtmp://live-atl.twitch.tv/app/\\n:: Twitch - Dallas:   rtmp://live-dfw.twitch.tv/app/\\n:: Twitch - San Fran: rtmp://live-sfo.twitch.tv/app/\\nset rtmp_url=rtmp://a.rtmp.youtube.com/live2/\\n \\n:: Change this to your streaming key. Make sure there is no space beside the \\"=\\" sign\\nset stream_key=xxxx-xxxx-xxxx-xxxx\\n \\n:: Loops through all the files in the folder in which OBS saves recordings\\n:: Saves the most recently created file in the file_name variable\\nfor /f %%i in (\'dir /b /s %folder_path%*.flv\') do set file_name=%%i\\n \\n:: Outputs the name of the most recently created file (helps with debugging)\\necho The most recently created file is %file_name%\\n \\n:: Outputs the command that the script calls (helps with debugging)\\necho ffmpeg -re -i %file_name% -acodec copy -vcodec copy -f flv %rtmp_url%%stream_key%\\n \\n:: Calls the ffmpeg command\\nffmpeg -re -i %file_name% -acodec copy -vcodec copy -f flv %rtmp_url%%stream_key%\\n \\n:: Pauses so you can see the output\\npause\\n```"},{"id":"web-scraping-with-php","metadata":{"permalink":"/blog/web-scraping-with-php","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2019-03-20-php-web-scraping.mdx","source":"@site/blog/2019-03-20-php-web-scraping.mdx","title":"Web Scraping with PHP","description":"In this article I will be showing you how to use PHP to scrape a web page. This article assumes that you have a basic understanding of PHP and programming concepts, and that you have access to a server capable of running PHP. If you do not have access to a server capable of running PHP, you can install WAMP on Windows 10 by watching my installation video. In a way, scraping involves reverse engineering a web page so it helps to be familiar with HTML.","date":"2019-03-20T00:00:00.000Z","formattedDate":"March 20, 2019","tags":[{"label":"PHP","permalink":"/blog/tags/php"}],"readingTime":3.45,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"web-scraping-with-php","title":"Web Scraping with PHP","authors":"jaymartin","tags":["PHP"]},"unlisted":false,"prevItem":{"title":"Multistream with OBS and FFMPEG","permalink":"/blog/multistream-ffmpeg"},"nextItem":{"title":"Input validation with Java","permalink":"/blog/input-validation-with-java"}},"content":"In this article I will be showing you how to use PHP to scrape a web page. This article assumes that you have a basic understanding of PHP and programming concepts, and that you have access to a server capable of running PHP. If you do not have access to a server capable of running PHP, you can [install WAMP on Windows 10 by watching my installation video](/articles/legacy/wamp-server/). In a way, scraping involves reverse engineering a web page so it helps to be familiar with HTML.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/Uc5mfudMTKE\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n<br />\\n\\n# Web Scraping With PHP\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=Uc5mfudMTKE).\\n:::\\n\\nAlthough there are other ways to scrape a web page with PHP, this article will focus on the Simple HTML DOM Parser. I have chosen to use this library because this is the library that I have experiance with and it is easy to use with great documentation.\\n\\n:::danger[Disclaimer]\\n\\n- Do not wep scrape maliciously.\\n- Do not scrape to steal data.\\n\\nYOU are responsible for anything you do with the skills you learn in this article and/or video.\\n:::\\n\\n## Installing the Library\\n\\nThe first thing you need to do is download the scraping library from SourceForge. You can do this by going to http://simplehtmldom.sourceforge.net/ and clicking on \\"Download latest version from SourceForge\\".\\n\\n![Screenshot of simple html dom scraper in sourceforge](./2019-03-20-images/simple-html-dom-sourceforge.jpg)\\n\\nOnce you have downloaded the library from SourceForge, unzip the compressed folder. Then move the \\"simple_html_dom.php\\" file to the folder that you will be building the web scraper in.\\n\\n![Screenshot of unzipping library](./2019-03-20-images/unzip-library.jpg)\\n\\n## Writing the Scraping Code\\n\\nNow that we have our library installed we can begin writing our scraping code.\\n\\n```php\\n<?php\\n   # This imports and gives us access to the scraping library\\n   include(\'simple_html_dom.php\');\\n?>\\n```\\n\\nNow that we have access to the scraping library, we can use the file_get_html function to create a DOM object from a url.\\n\\n```php\\n<?php\\n   # This imports and gives us access to the scraping library\\n   include(\'simple_html_dom.php\');\\n   \\n   # Create HTML DOM object from url\\n   $html = file_get_html(\'https://google.com\');\\n?>\\n```\\n\\nWe can then pull specific elements from this DOM object by calling the find method and passing in the tag name of the element we would like to grab. We can also pass an index if we would like to grab only a single instance of a particular tag. If we want to grab an array of tags, we refrain from passing an index.\\n\\n```php\\n# Create HTML DOM object from url\\n$html = file_get_html(\'https://google.com\');\\n   \\n# Gets the 0th title element from the DOM object and echos it to the webpage\\necho $html->find(\'title\',0);\\n   \\n# If we don\'t pass an index we can get an array of all the anchor elements from the DOM object\\n$array_of_anchors = $html->find(\'a\');\\n   \\n# We can echo all of the anchor elements from the array above by using a simple for loop\\nfor( $i = 0; $i < sizeof($list_of_anchors); $i++ ){\\n   # echo each anchor by using the $i iterator to pull the anchor in each index position\\n   echo $list_of_anchors[$i];\\n}\\n```\\n\\nIn addition to selecting elements based on their tag name, we can select elements based on class or ID.\\n\\n```php\\n$html = file_get_html(\'https://google.com\');\\n    \\n$array_of_hidden_divs = $html->find(\'div[class=\\"hidden\\"]\');\\n    \\n$array_of_thumbnails = $html->find(\'img[id=\\"thumbnail\\"]\');\\n```\\n\\nThe find method returns a DOM object. This means that we can call the find method on itself to grab child elements.\\n\\n```php\\n$html = file_get_html(\'https://google.com\');\\n   \\n$ul = $html->find(\'ul\',0);\\n   \\n$array_of_li = $ul->find(\'li\');\\n   \\n# This is the same as above, but in a single line\\n$array_of_li = $html->find(\'ul\',0)->find(\'li\');\\n```\\n\\nWe can extract certain data such as the text of an element, or the hyperlink reference of an anchor tag, or the source of an image.\\n\\n```php\\n$html = file_get_html(\'https://google.com\');\\n    \\n$button_text = $html->find(\'button\',0)->plaintext;\\n \\n$anchor_href = $html->find(\'a\',0)->href;\\n \\n$image_source = $html->find(\'img\',0)->src;\\n```"},{"id":"input-validation-with-java","metadata":{"permalink":"/blog/input-validation-with-java","editUrl":"https://github.com/jaymartmedia/jaymartmedia.github.io/tree/main/blog/2019-02-27-input-validation-with-java.mdx","source":"@site/blog/2019-02-27-input-validation-with-java.mdx","title":"Input validation with Java","description":"In this article I will be showing you how to perform validation on user input in Java. This article assumes that you have a basic understanding of Java and the Scanner class, and that you already have a compiler or IDE installed. I will be using JGrasp but you can use your favorite enviroment.","date":"2019-02-27T00:00:00.000Z","formattedDate":"February 27, 2019","tags":[{"label":"Java","permalink":"/blog/tags/java"}],"readingTime":3.09,"hasTruncateMarker":true,"authors":[{"name":"Jay Martin","title":"Runner of JayMartMedia","url":"https://github.com/jaymartmedia","imageURL":"https://github.com/jaymartmedia.png","key":"jaymartin"}],"frontMatter":{"slug":"input-validation-with-java","title":"Input validation with Java","authors":"jaymartin","tags":["Java"]},"unlisted":false,"prevItem":{"title":"Web Scraping with PHP","permalink":"/blog/web-scraping-with-php"}},"content":"In this article I will be showing you how to perform validation on user input in Java. This article assumes that you have a basic understanding of Java and the Scanner class, and that you already have a compiler or IDE installed. I will be using JGrasp but you can use your favorite enviroment.\\n\\n\x3c!--truncate--\x3e\\n\\n<link rel=\\"stylesheet\\" href=\\"/legacy/jmm-video.css\\" />\\n\\n<div class=\\"jmm-video-container\\">\\n    <iframe class=\\"jmm-video\\" src=\\"https://www.youtube.com/embed/kLPBxtsf-b4\\" frameborder=\\"0\\" allow=\\"accelerometer; encrypted-media; gyroscope; picture-in-picture\\" allowfullscreen></iframe>\\n</div>\\n\\n<br />\\n\\n# Input Validation with Java\\n\\n:::info\\nI have written this article in text form in order to save you time. In my experience, reading an article is often faster and/or more convenient (certainly quieter) than watching a video. If you would prefer to view this information in video form, you can click the video above, or [view the video on YouTube](https://www.youtube.com/watch?v=kLPBxtsf-b4).\\n:::\\n\\nThe purpose of user validation is to make sure that the user inputs a value that is both the correct type and a valid value. For example: the user should not be allowed to center a negative number for their age. The user should also not be allowed to enter a String such as \\"Hello\\" for their age. The age must be a positive integer, or float, depending on the use case.\\n\\n```js title=\\"Code to read an int\\"\\n// must have imported the scanner class\\n// import java.util.*;\\npublic static int read_int(Scanner stdin, String prompt){\\n  int i = -1;\\n  while( i < 0 ){\\n    System.out.print(prompt);\\n \\n    String input = stdin.nextLine();\\n \\n    try{\\n      i = Integer.valueOf(input);\\n    } catch (NumberFormatException e) {\\n      i = -1;\\n    }\\n  }\\n  return i;\\n}// end read_int function\\n```\\n\\n```js title=\\"Code to read a float\\"\\n// must have imported the scanner class\\n// import java.util.*;\\npublic static float read_float(Scanner stdin, String prompt){\\n   float i = -1;\\n   while( i < 0 ){\\n      System.out.print(prompt);\\n \\n      String input = stdin.nextLine();\\n \\n      try{\\n         i = Float.valueOf(input);\\n      } catch (NumberFormatException e) {\\n         i = -1;\\n      }\\n   }\\n   return i;\\n}// end read_float function\\n```\\n\\n**On line 3** the function accepts a scanner object in addition to a string.\\n\\n**On line 4** we set a variable i which will hold our data value returned by the user. We initailize it at an invalid value so that our while loop will run.\\n\\n**On line 5** we continue looping until i is greater than 0. This could easily be changed if we wanted the integer to be in a different range.\\n\\n**On line 6** we ask our user for input by printing the prompt.\\n\\n**On line 8** we accept input as a string using the scanner. Note that this MUST be .nextLine() we cannot use .nextInt() or .nextFloat() or we will get an error.\\n\\n**On line 11** we attempt to convert the input string into an integer inside a try/catch block.\\n\\n**On line 13** we set the variable i to an invalid value so the while loop will continue to run. Line 13 will only be executed if the input String cannot be converted to an integer.\\n\\n```js title=\\"Using the read methods\\"\\n// sets up a new scanner object\\nScanner stdin = new Scanner(System.in);\\n \\n// calls the read_int function and passes in the scanner object and a text prompt\\nint age = read_int(stdin, \\"Enter your age: \\");\\n \\n// outputs the users age to the console\\nSystem.out.println(\\"Your age is: \\"+age);\\n```\\n\\n```js title=\\"Full code example\\"\\nimport java.util.*;\\npublic class Demo {\\n    public static void main(String[] args) {\\n        Scanner stdin = new Scanner(System.in);\\n \\n        float f = read_float(stdin, \\"Enter a float\\");\\n \\n        System.out.println(f);\\n    }\\n \\n    public static float read_float(Scanner stdin, String prompt) {\\n        float i = -1;\\n        while (i < 0) {\\n            System.out.print(prompt);\\n \\n            String input = stdin.nextLine();\\n \\n            try {\\n                i = Float.valueOf(input);\\n            } catch (NumberFormatException e) {\\n                i = -1;\\n            }\\n        }\\n        return i;\\n    }\\n}\\n```"}]}')}}]);